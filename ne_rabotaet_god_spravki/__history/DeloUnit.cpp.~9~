#include <vcl.h>
#pragma hdrstop


#include "DataModule_Card.h"
#include "DataModule.h"
#include "DeloUnit.h"
#include "DM2Unit.h"
#include "DM3Unit.h"
#include "StudUnit.h"


#pragma package (smart_init)
// #pragma link     "DualList"
// #pragma link     "RXDBCtrl"
// #pragma link     "ToolEdit"
// #pragma link     "RxLookup"
// #pragma link     "MyList"
#pragma resource "*.dfm"


TDeloForm *DeloForm;


AnsiString * mas_fio_nomer[2];                                                  // массив номеров и фамилий студентов

AnsiString   kurs,                                                              // номер курса
             sql_dop,                                                           // переменные для создания комбинированного SQL состоящего из 2-х частей
             sql_head;                                                          // переменные для создания комбинированного SQL состоящего из 2-х частей

AnsiString   sql_old = "            \
                SELECT              \
                    NOMER,          \
                    VID_EDU,        \
                    N_FAC,          \
                    KURS,           \
                    N_SPEC,         \
                    N_SPECIALIZ,    \
                    N_PRIKAZ_KURS,  \
                    D_PRIKAZ_KURS,  \
                    D_INCLUDE,      \
                    DATE_END,       \
                    N_GROUP,        \
                    INC_GROUP,      \
                    F_OLD,          \
                    STATUS_PEOPLE,  \
                    FAM,            \
                    NAME,           \
                    OTCH,           \
                    DATA_R,         \
                    STATUS_KURS,    \
                    N_FOUND         \
                FROM                \
                    PEOPLE People   \
                ";                                                              // при восстановлении запоминаем старый SQL PeopleUpQuery

bool         correct = false,
             found,
             t       = true;

int          mas     = 0,                                                       // переменная для определения есть ли данные в массиве 0 - данных нет  1 - данные есть
             rec;                                                               // количество студентов в группе

Variant      i_gr;




// BitBtn1Click
// BitBtn2Click
// BitBtn3Click
// BitBtn4Click
// BitBtn5Click
// BitBtn6Click
// BitBtn7Click
// BitBtn8Click
// BitBtn9Click
// BitBtn10Click
// BitBtn11Click
// BitBtn12Click
// BitBtn13Click
// BitBtn14Click
// BitBtn15Click
// BitBtn16Click
// BitBtn17Click
// BitBtn18Click
// BitBtn19Click
// BitBtn20Click
// BitBtn21Click
// BitBtn22Click
// BitBtn23Click
// BitBtn24Click
// BitBtn25Click
// BitBtn26Click
// BitBtn27Click
// BitBtn28Click
// BitBtn29Click
// BitBtn30Click
// BitBtn31Click
// BitBtn128Click
// Button1Click
// Button2Click
// Button3Click
// Button4Click
// Button5Click
// Button111Click
// ComboBox1Change
// ComboBox2Change
// ComboBox4Change
// ComboBox5Change
// ComboBox6Change
// ComboBox7Change
// ComboBox8Change
// ComboBox9Change
// ComboBox10Change
// ComboBox14Change
// DateTimePicker1Change
// DateTimePicker2Change
// DateTimePicker3Change
// DateTimePicker4Change
// DateTimePicker5Change
// DateTimePicker6Change
// DateTimePicker7Change
// DateTimePicker8Change
// DateTimePicker9Change
// DateTimePicker10Change
// DateTimePicker11Change
// DateTimePicker12Change
// DateTimePicker13Change
// DateTimePicker14Change
// DateTimePicker15Change
// DateTimePicker16Change
// DateTimePicker17Change
// DateTimePicker18Change
// DateTimePicker19Change
// DateTimePicker20Change
// DateTimePicker21Change
// DateTimePicker22Change
// DateTimePicker23Change
// DateTimePicker112Change
// DBLookupComboBox16Click
// DBLookupComboBox22CloseUp
// Edit3Change
// Edit23KeyPress
// Edit35Change
// FormClose
// FormCreate
// Image1Click
// Label35Click
// PageControl1Change
// Panel1Click
// RadioGroup1Click
// RadioGroup2Click
// RadioGroup3Click
// RadioGroup4Click
// RadioGroup5Click
// RadioGroup8Click
// RadioGroup10Click
// RadioGroup12Click
// RadioGroup13Click
// RadioGroup18Click
// TabSheet8Exit
// TabSheet11Show
// TabSheet111Show
// Clear_Holiday
// Otkat
// Save_PrikazVipusk



__fastcall TDeloForm::TDeloForm (TComponent* Owner) : TForm (Owner) {
}

void __fastcall TDeloForm::FormClose (TObject *Sender, TCloseAction &Action) {
    // !!!if (Application -> MessageBox ("    Закрыть форму приказы?", "", MB_YESNO) == mrYes)
    if (MessageDlg ("    Закрыть форму приказы?", mtConfirmation,
        TMsgDlgButtons () << mbYes << mbNo, 0) == mrYes) {
        if (mas) {
            for (int i = 0; i < 2; i++)
                delete[]mas_fio_nomer[i];
            // delete[]mas_fio_nomer;
            mas = 0;
        }
        DataModule1 -> People_PartFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> Close ();
        Action = caFree;
    }
    else
        Action = caNone;
}

void __fastcall TDeloForm::BitBtn1Click (TObject *Sender)
{ // Закладка Отчисление -- действие по кнопке выбрать студента
    if ( (ComboBox2 -> ItemIndex == -1) && (Edit2 -> Text == "") &&
        (RadioGroup10 -> ItemIndex == 1)) {
        ShowMessage ("Проверьте правильность введенных данных!");
        return;
    }

    i_gr = search_increment_group (Edit2 -> Text, ComboBox2 -> ItemIndex);
    if (!i_gr.IsNull ()) {
        /* DataModule1 -> People_PartFDQuery -> Close ();
         DataModule1 -> People_PartFDQuery -> SQL -> Clear ();
         DataModule1 -> People_PartFDQuery -> SQL -> Add ("SELECT NOMER, FAM, NAME, OTCH, INC_GROUP, N_GROUP, VID_EDU, KURS, N_FOUND FROM PEOPLE WHERE (N_FAC="+AnsiString (nom_fac)+") AND (STATUS_PEOPLE=1) AND (INC_GROUP=:INC_GROUP) ORDER BY FAM, NAME, OTCH");
         DataModule1 -> People_PartFDQuery -> ParamByName ("INC_GROUP") -> AsInteger=i_gr;
         DataModule1 -> People_PartFDQuery -> Open (); */

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, \
   N_PRIKAZ_KURS, D_PRIKAZ_KURS, D_INCLUDE, DATE_END, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, \
   STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO  \
   FROM PEOPLE People WHERE (N_FAC=" + AnsiString (nom_fac) +
            ") AND (STATUS_PEOPLE=1) AND (INC_GROUP=:I_GR) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("I_GR") -> AsInteger = i_gr;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        // if (DataModule1 -> People_PartFDQuery -> RecordCount)
        if (DataModule1 -> PeopleUpFDQuery -> RecordCount)
        { // если студенты выбраны, то показываем панель и переводим Query в режим вставки
            Panel2 -> Visible = true;
            DataModule1 -> RestoreFDQuery -> Open ();
            // DataModule1 -> RestoreFDQuery -> Insert ();
        }
        else { // если записей не обнаружено
            ShowMessage (
                "Проверьте введенные данные, возможно вы выбрали группу другого факультета!");
            Edit2 -> SetFocus ();
        }
    }
    else {
        ShowMessage ("Номера группы с таким видом обучения не существует");
        Edit2 -> SetFocus ();
    }
}

void __fastcall TDeloForm::ComboBox2Change (TObject *Sender) {
    Panel2 -> Visible = false;
}

void __fastcall TDeloForm::BitBtn2Click (TObject *Sender)
{ // закладка отчисление, действие по кнопке отчислить
    if (FIOLook -> KeyValue == -1) {
        ShowMessage ("Выберите ФИО студента!");
        return;
    }
    if (DBLookupComboBox1 -> KeyValue == -1) {
        ShowMessage ("Выберите причину отчисления студента!");
        return;
    }
    if (Edit28 -> Text == "") {
        ShowMessage ("Выберите № приказа на отчисление!");
        return;
    }

    // процедура поиска целевого контракта
    if (!DataModule1 -> Search_CK (FIOLook -> KeyValue, 1, Edit28 -> Text,
        DateTimePicker13 -> Date.DateString ()))
    { // if по процедуре вернулся 0 - что означает отменить действие

        ShowMessage (
            "Отчисление приостановлено из-за проблем с целевым контрактом!");
        return;
    }
    // ---
    try {
        if (DataModule1 -> RestoreFDQuery -> State != dsInsert)
            DataModule1 -> RestoreFDQuery -> Insert ();

        TLocateOptions fl;
        int n_st = FIOLook -> KeyValue;
        DataModule1 -> RestoreFDQueryNOMER -> Value = n_st; // номер абитуриента
        DataModule1 -> RestoreFDQueryN_CAUSE_RESTORE -> Value =
            DBLookupComboBox1 -> KeyValue; // причина отчисления
        try { // проверка на ввод в № приказа числового значения
            DataModule1 -> RestoreFDQueryN_PRIKAZ_RES -> Value =
                StrToInt (Edit28 -> Text); // № приказа на отчисление
        }
        catch (...) {
            DataModule1 -> RestoreFDQuery -> CancelUpdates ();
            ShowMessage ("Неверно введен № приказа!");
            return;
        }

        DataModule1 -> RestoreFDQueryD_PRIKAZ_RES -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker13 -> Date);
        // Дата приказа на отчисление
        DataModule1 -> RestoreFDQueryVID_RESTORE -> Value = 1; // отчисление

        // DataModule1 -> PeopleUpQuery -> Open ();
        // DataModule1 -> PeopleUpQuery -> Locate ("NOMER",n_st,fl);
        DataModule1 -> PeopleUpFDQuery -> Edit ();
        // проверка на Status_kurs если 0, то все в порядке
        // если 1, то студент условно не переведен на следующий курс
        // тогда надо спрашивать изменить ли номер группы и курс
        if (DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value == 1) {
            /* !!!if (Application -> MessageBox ("Этот студент был условно переведен на следующий курс. Изменить номер группы и курс?",
             "Внимание", MB_OKCANCEL) == IDOK) */
            if (MessageDlg
                ("Этот студент был условно переведен на следующий курс. Изменить номер группы и курс?",
                mtConfirmation, TMsgDlgButtons () << mbOK << mbCancel, 0) == 1)
            { // if изменяем номер группы и курс на один меньше
                int old_kurs = DataModule1 -> PeopleUpFDQueryKURS -> Value;
                int old_gr =
                    StrToInt (DataModule1 -> PeopleUpFDQueryN_GROUP -> Value);
                if (old_kurs != 1) {
                    DataModule1 -> PeopleUpFDQueryKURS -> Value = (old_kurs - 1);
                    if (nom_fac == 3)
                    { // if это ОФКиТ - то надо спереди доставить 0
                        DataModule1 -> PeopleUpFDQueryN_GROUP -> Value =
                            "0" + IntToStr (old_gr - 10);
                    }
                    else
                        DataModule1 -> PeopleUpFDQueryN_GROUP -> Value =
                            IntToStr (old_gr - 10);
                }
            }

            DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 0;
        }

        DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 2;
        // статус для отчисленных
        DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = 18;
        // инкремнент для группы с номером 000
        try { // try
            DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
            DataModule1 -> RestoreFDQuery -> ApplyUpdates ();
            DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
            DataModule1 -> RestoreFDQuery -> CommitUpdates ();
            DataModule1 -> PeopleUpFDQuery -> Close ();
            DataModule1 -> RestoreFDQuery -> Close ();
            DataModule1 -> People_PartFDQuery -> Close ();
        } // end try
        catch (...) {
            DataModule1 -> RestoreFDQuery -> CancelUpdates ();
            DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
            DataModule1 -> PeopleUpFDQuery -> Close ();
            DataModule1 -> RestoreFDQuery -> Close ();

            ShowMessage ("Произошла ошибка!");

        }
        // -----
        ComboBox2 -> ItemIndex = -1;
        Edit2 -> Text = "";
        ComboBox2 -> Visible = false; // вид обучения
        Edit2 -> Visible = false; // группа
        BitBtn1 -> Visible = false; // кнопка выбора
        Label4 -> Visible = false;
        Label5 -> Visible = false;
        // --------------
        Panel2 -> Visible = false;
        FIOLook -> KeyValue = -1; // очистка ФИО
        DBLookupComboBox1 -> KeyValue = -1; // очистка причины отчисления
        Edit28 -> Text = ""; // очистка № приказа
        DateTimePicker13 -> Date = Now (); // очистка даты приказа
        DateTimePicker13 -> Time = StrToTime ("00:00");
        // -*----
        RadioGroup10 -> ItemIndex = -1;
    }
    catch (...) {
        DataModule1 -> RestoreFDQuery -> CancelUpdates ();
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> RestoreFDQuery -> Close ();

        ShowMessage ("Произошла ошибка!");
    }
}

void __fastcall TDeloForm::BitBtn3Click (TObject *Sender)
{ // закладка восстановление - поиск отчисленного студента

    Panel4 -> Visible = false;
    Edit3 -> Text = "";
    Edit3 -> Visible = false;
    Label10 -> Visible = false;
    Panel3 -> Visible = false;

    try {

        // sql_old="SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND FROM PEOPLE People";

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_INCLUDE, DATE_END, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO  FROM PEOPLE People WHERE (STATUS_PEOPLE=2) OR (STATUS_PEOPLE=7) ORDER BY FAM, NAME, OTCH"
            );
        DataModule1 -> PeopleUpFDQuery -> Open ();

        if (DataModule1 -> PeopleUpFDQuery -> RecordCount) {
            Panel3 -> Visible = true;
            Edit3 -> Visible = true;
            Label10 -> Visible = true;
            DM2 -> SpecializFDTable -> Filtered = false;
            DataModule1 -> PeopleUpFDQuery -> Last ();
            DataModule1 -> PeopleUpFDQuery -> First ();
        }
        else {
            ShowMessage (
                "В базе данных такого студента нет. Проверьте правильность введенных данных!");
        }

    } // try
    catch (...) {
        ShowMessage (
            "Программа выполнила недопустимую операцию и будет закрыта. Все несохраненные данные будут потеряны. Если ошибка будет появляться в дальнейшем, обращайтесь к разработчикам данного продукта!!!");
    }
}

void __fastcall TDeloForm::Edit3Change (TObject *Sender)
{ // быстрый поиск по фамилии
    if (DataModule1 -> PeopleUpFDQuery -> State != dsInactive) { // if Query открыт
        Set<TLocateOption, 0, 1>flags;
        flags << loCaseInsensitive << loPartialKey;
        DataModule1 -> PeopleUpFDQuery -> Locate ("FAM", Edit3 -> Text, flags);
    } // end if Query открыт
}

void __fastcall TDeloForm::BitBtn4Click (TObject *Sender)
{ // закладка Восстановление, действие по кнопке -- Восстановить
    Label15 -> Caption = DM2 -> FacultyFDTable -> Lookup ("N_FAC", nom_fac, "FAC1");
    Panel4 -> Visible = true;
    DM2 -> SpecializFDTable -> Filtered = true;
    // Panel3 -> Visible=false;
    DataModule1 -> RestoreFDQuery -> Open ();
    Edit3 -> Text = DataModule1 -> PeopleUpFDQueryFAM -> Value + " " +
        DataModule1 -> PeopleUpFDQueryNAME -> Value + " " +
        DataModule1 -> PeopleUpFDQueryOTCH -> Value;
    DateTimePicker16 -> Date = Now (); // Дата приказа
    DateTimePicker16 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::BitBtn5Click (TObject *Sender)
{ // закладка восстановление - восстановление студента
    // -------------
    if (ComboBox3 -> ItemIndex == -1) {
        ShowMessage ("Выберите вид обучения!");
        return;
    }
    // --------------
    if (Edit6 -> Text == "") {
        ShowMessage ("Введите номер группы!");
        return;
    }
    // --------------
    if (Edit7 -> Text == "") {
        ShowMessage ("Введите курс!");
        return;
    }
    // --------------
    if (Edit31 -> Text == "") {
        ShowMessage ("Введите № приказа!");
        return;
    }

    // ------------------
    if (DBLookupComboBox2 -> KeyValue == -1) {
        ShowMessage ("Выберите специализацию (направление специальности)!");
        return;
    }
    // ---------------------

    if (DBLookupComboBox20 -> KeyValue == -1) {
        ShowMessage ("Выберите специальность!");
        return;
    }
    // ---------------------

    if ( (ComboBox3 -> ItemIndex != -1) && (Edit6 -> Text != "") &&
        (Edit7 -> Text != "") && (DBLookupComboBox2 -> Text != ""))
    { // if проверка на ввод всех данных
        if (!check_fac_group (Edit6 -> Text))
            return; // проверка на номер группы и факультет
        if (!check_group_kurs (Edit6 -> Text, Edit7 -> Text))
            return; // проверка на номер группы и курс

        // Поиск существующего номера группы
        i_gr = search_increment_group (Edit6 -> Text, ComboBox3 -> ItemIndex);
        if (i_gr.IsNull ()) {
            ShowMessage ("Номера группы с таким видом обучения не существует!");
            Edit6 -> Text = "";
            Edit6 -> SetFocus ();
            return;
        }

        int n_prikaz = 0; // номер приказа
        try { // проверка на ввод в № приказа числового значения
            n_prikaz = StrToInt (Edit31 -> Text); // № приказа на восстановление
        }
        catch (...) {
            ShowMessage ("Неверно введен № приказа!");
            return;
        }
        //////////////////////////////////
        // Сохраняем данные по студенту
        if (DataModule1 -> PeopleUpFDQuery -> State == dsInactive)
            DataModule1 -> PeopleUpFDQuery -> Open ();
        if (DataModule1 -> PeopleUpFDQuery -> State != dsEdit)
            DataModule1 -> PeopleUpFDQuery -> Edit ();
        DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = i_gr; // инкремент группы
        DataModule1 -> PeopleUpFDQueryN_GROUP -> Value = Edit6 -> Text;
        // номер группы
        DataModule1 -> PeopleUpFDQueryVID_EDU -> Value = ComboBox3 -> ItemIndex;
        // вид обучения
        DataModule1 -> PeopleUpFDQueryKURS -> Value = Edit7 -> Text.ToInt (); // курс
        DataModule1 -> PeopleUpFDQueryN_FAC -> Value = nom_fac; // факультет
        DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 1;
        // статус действующего студента
        DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 0;
        // без задолженностей
        DataModule1 -> PeopleUpFDQueryN_SPECIALIZ -> Value =
            DBLookupComboBox2 -> KeyValue; // специализация
        // специальность студента, изменяется, если изменяется специализация
        DataModule1 -> PeopleUpFDQueryN_SPEC -> Value =
            DBLookupComboBox20 -> KeyValue; // специальность

        DataModule1 -> PeopleUpFDQueryD_INCLUDE -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker16 -> Date);
        // дата начала обучения

        // Дата окончания 30.06.2___ //ПРОВЕРИТЬ!!!!! Не всегда привилоно!!!!
        AnsiString kurs_uch = "", year_end = "", date_end = "";

        if (DataModule1 -> PeopleUpFDQueryVID_EDU -> Value == 1) { // заочная
            kurs_uch = 6 - DataModule1 -> PeopleUpFDQueryKURS -> Value;
            // сколько курсов учиться
            year_end = uch_god + kurs_uch; // год окончания
            if (kurs_uch == 0)
                year_end = uch_god + 1; // год окончания
        }
        else { // дневная
            kurs_uch = 5 - DataModule1 -> PeopleUpFDQueryKURS -> Value;
            // сколько курсов учиться
            year_end = uch_god + kurs_uch; // год окончания
            if (kurs_uch == 0)
                year_end = uch_god + 1; // год окончания
        }
        date_end = "30.06." + year_end;
        DataModule1 -> PeopleUpFDQueryDATE_END -> Value =
            DateTimeToSQLTimeStamp (StrToDate (date_end));

        // договор   или  бюджет
        if (RadioGroup9 -> ItemIndex) // договор
        {
            DataModule1 -> PeopleUpFDQueryN_FOUND -> Value = 2; // основание договор
        }
        else { // бюджет
            DataModule1 -> PeopleUpFDQueryN_FOUND -> Value = 6; // бюджет
        }

        // Сохранение по приказам
        if (RadioGroup12 -> ItemIndex == 3)
        { // if перевод из другого ВУЗа - не надо приказа о восстановлении
            if (DataModule1 -> Public_PrikazFDQuery -> State == dsInactive)
                DataModule1 -> Public_PrikazFDQuery -> Open ();
            DataModule1 -> Public_PrikazFDQuery -> Insert ();
            DataModule1 -> Public_PrikazFDQueryNOMER -> Value =
                DataModule1 -> PeopleUpFDQueryNOMER -> Value; // номер студента
            DataModule1 -> Public_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
                n_prikaz; // № приказа
            DataModule1 -> Public_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker16 -> Date); // Дата приказа
            DataModule1 -> Public_PrikazFDQueryN_TYPE -> Value = 7;
            // Тип приказа перевод из другого ВУЗа
            DataModule1 -> Public_PrikazFDQueryDESCRIBE -> Value =
                LabeledEdit1 -> Text; // примечания
        } // end if перевод из другого ВУЗа - не надо приказа о восстановлении
        else { // else другой тип восстаносления - надо призак о восстановлении

            // Сохраняем данные в приказы отчисления/восстановления
            if (DataModule1 -> RestoreFDQuery -> State == dsInactive)
                DataModule1 -> RestoreFDQuery -> Open ();
            if (DataModule1 -> RestoreFDQuery -> State != dsInsert)
                DataModule1 -> RestoreFDQuery -> Insert ();

            DataModule1 -> RestoreFDQueryNOMER -> Value =
                DataModule1 -> PeopleUpFDQueryNOMER -> Value;
            DataModule1 -> RestoreFDQueryVID_RESTORE -> Value = 0;
            // 0 - восстановление
            DataModule1 -> RestoreFDQueryN_PRIKAZ_RES -> Value = n_prikaz;
            // № приказа на восстановление
            DataModule1 -> RestoreFDQueryD_PRIKAZ_RES -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker16 -> Date);
            // дата приказа на восстановление
            // причина восстановления
            switch (RadioGroup12 -> ItemIndex) { // switch
            case 0:
                DataModule1 -> RestoreFDQueryN_CAUSE_RESTORE -> Value = 4;
                // причина по собств. желанию = 4
                break;
            case 1:
                DataModule1 -> RestoreFDQueryN_CAUSE_RESTORE -> Value = 12;
                // причина по личному желанию = 12
                break;
            case 2:
                DataModule1 -> RestoreFDQueryN_CAUSE_RESTORE -> Value = 17;
                // обучался в другом ВУЗе = 17
                break;
            } // end switch

            // примечание
            if (RadioGroup12 -> ItemIndex == 2)
                DataModule1 -> RestoreFDQueryDESCRIBE -> Value = LabeledEdit1 -> Text;
            else
                DataModule1 -> RestoreFDQueryDESCRIBE -> Value =
                    "восстановлен на " + Edit7 -> Text + " курс на " +
                    RadioGroup9 -> Items -> Strings[RadioGroup9 -> ItemIndex];
        } // end else другой тип восстаносления - надо призак о восстановлении

        try { // try сохранение данных
            if (RadioGroup12 -> ItemIndex == 3)
            { // if перевод из другого ВУЗа - не надо приказа о восстановлении
                DataModule1 -> Public_PrikazFDQuery -> ApplyUpdates ();
                DataModule1 -> Public_PrikazFDQuery -> CommitUpdates ();
            }
            else { // else другой тип восстаносления - надо призак о восстановлении
                DataModule1 -> RestoreFDQuery -> ApplyUpdates ();
                DataModule1 -> RestoreFDQuery -> CommitUpdates ();
            }

            DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
            DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();

            ShowMessage (DataModule1 -> PeopleUpFDQueryFAM -> Value + " " +
                DataModule1 -> PeopleUpFDQueryNAME -> Value + " " +
                DataModule1 -> PeopleUpFDQueryOTCH -> Value + " восстановлен");
            DM2 -> SpecializFDTable -> Filtered = true;
        } // end try сохранение данных
        catch (...) { // catch не получилось сохранить

            if (RadioGroup12 -> ItemIndex == 3)
            { // if перевод из другого ВУЗа - не надо приказа о восстановлении
                DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
                ShowMessage (
                    "Не удалось сохранить приказ на перевод из другого ВУЗа!");
            }
            else { // else другой тип восстаносления - надо призак о восстановлении
                DataModule1 -> RestoreFDQuery -> CancelUpdates ();
                ShowMessage (
                    "Не прошло восстановление студента. Обратитесь к разработчикам!");
            }
            DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
            return;
        } // end catch не получилось сохранить

        DataModule1 -> Public_PrikazFDQuery -> Close ();
        DataModule1 -> RestoreFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add (sql_old);

        // -----
        Edit3 -> Visible = true; // быстрый поиск по фамилии
        Label10 -> Visible = true; // быстрый поиск по фамилии
        Panel3 -> Visible = false;
        // -------
        Panel4 -> Visible = false;
        Edit6 -> Text = ""; // № группы
        Edit7 -> Text = ""; // курс
        Edit31 -> Text = ""; // № приказа
        DateTimePicker16 -> Date = Now (); // Дата приказа
        DateTimePicker16 -> Time = StrToTime ("00:00");
        ComboBox3 -> ItemIndex = -1; // вид обучения
        DBLookupComboBox2 -> KeyValue = -1; // специализация
        // -------
        Edit3 -> Text = ""; // Фамилия
    } // end if проверка на ввод всех данных
    else {
        ShowMessage ("Введены не все данные.");
    }

}

void __fastcall TDeloForm::ComboBox4Change (TObject *Sender) {
    Panel5 -> Visible = false;
}

void __fastcall TDeloForm::BitBtn6Click (TObject *Sender)
{ // Закладка Изменение фамилии, действие по кнопке -- Выбрать студента

    i_gr = search_increment_group (Edit8 -> Text, ComboBox4 -> ItemIndex);
    if (!i_gr.IsNull ()) {
        // sql_old="SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND FROM PEOPLE People";

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, \
    N_PRIKAZ_KURS, D_PRIKAZ_KURS, D_INCLUDE, DATE_END, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, \
    FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO \
    FROM PEOPLE People WHERE (N_FAC=" + AnsiString (nom_fac) + ") AND ( (STATUS_PEOPLE=1 AND INC_GROUP=:I_GR) \
    or (STATUS_PEOPLE=3 AND N_GROUP=" + Edit8 -> Text +
            ")) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("I_GR") -> AsInteger = i_gr;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        if (DataModule1 -> PeopleUpFDQuery -> RecordCount) {
            Panel5 -> Visible = true;
            DateTimePicker14 -> Date = Now ();
            DataModule1 -> Public_PrikazFDQuery -> Open ();
            // DataModule1 -> Public_PrikazQuery -> Insert ();
        }
        else {
            ShowMessage ("Не найден номер группы!");
            Edit8 -> SetFocus ();
        }

    }
    else {
        ShowMessage ("Не найден номер группы!");
        Edit8 -> SetFocus ();
    }
}

void __fastcall TDeloForm::BitBtn7Click (TObject *Sender) {
    if (DBLookupComboBox4 -> KeyValue == -1) {
        ShowMessage ("Выберите ФИО студента!");
        return;
    }
    if (DBLookupComboBox5 -> KeyValue == -1) {
        ShowMessage ("Выберите тип приказа на изменение фамилии!");
        return;
    }
    if (Edit29 -> Text == "") {
        ShowMessage ("Введите № приказа на изменение фамилии!");
        return;
    }
    try { // try
        if (Edit9 -> Text != "") { // проверка на непустое поле новой фамилии
            if (DBLookupComboBox5 -> KeyValue == 2)
            { // if проверка на выбор типа приказа: Изменение фамилии
                // занесение  сначала в примечания Public_Prikaz старой фамилии

                if (DataModule1 -> Public_PrikazFDQuery -> State != dsInsert)
                    DataModule1 -> Public_PrikazFDQuery -> Insert ();

                DataModule1 -> Public_PrikazFDQueryNOMER -> Value =
                    DBLookupComboBox4 -> KeyValue; // ФИО студента на изм. фамилии
                DataModule1 -> Public_PrikazFDQueryN_TYPE -> Value =
                    DBLookupComboBox5 -> KeyValue; // тип приказа ==2
                try { // проверка на ввод в № приказа числового значения
                    DataModule1 -> Public_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
                        StrToInt (Edit29 -> Text); // № приказа на изм.фамилии
                }
                catch (...) {
                    DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
                    ShowMessage ("Неверно введен № приказа!");
                    return;
                }
                DataModule1 -> Public_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
                    DateTimeToSQLTimeStamp (DateTimePicker14 -> Date);
                // дата приказа на изм. фамилии
                DataModule1 -> Public_PrikazFDQueryDESCRIBE -> Value =
                    DataModule1 -> PeopleUpFDQueryFAM -> Value;
                // сохранение старой фамилии
                DataModule1 -> Public_PrikazFDQuery -> ApplyUpdates ();

                // изменение фамилии и запоминание старой фамилии в  F_OLD
                // (но в случае изменения фамилии несколько раз - ее отследим в DESCRIBE)

                DataModule1 -> PeopleUpFDQuery -> Edit ();
                DataModule1 -> PeopleUpFDQueryF_OLD -> Value =
                    DataModule1 -> PeopleUpFDQueryFAM -> Value;
                DataModule1 -> PeopleUpFDQueryFAM -> Value = Edit9 -> Text;
                DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();

                DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
                DataModule1 -> Public_PrikazFDQuery -> CommitUpdates ();

                ShowMessage ("Фамилия изменена на " + Edit9 -> Text);

                Panel5 -> Visible = false;
                ComboBox4 -> ItemIndex = -1;
                Edit8 -> Text = ""; // № группы
                Edit29 -> Text = ""; // № приказа
                Edit9 -> Text = ""; // новая фамилия
                DateTimePicker14 -> Date = Now (); // дата приказа
                DateTimePicker14 -> Time = StrToTime ("00:00");
                DBLookupComboBox4 -> KeyValue = -1; // ФИО студента
                DBLookupComboBox5 -> KeyValue = -1; // тип приказа

                Edit8 -> SetFocus ();

                DataModule1 -> Public_PrikazFDQuery -> Close ();
                DataModule1 -> PeopleUpFDQuery -> Close ();
                DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
                DataModule1 -> PeopleUpFDQuery -> SQL -> Add (sql_old);
            } // end if  проверка на выбор типа приказа: Изменение фамилии
            else
                ShowMessage ("Выберите тип приказа: Изменение фамилии!!!");
        } // end if если не внесена новая фамилия
        else
            ShowMessage ("Введите новую фамилию!!!");
    } // end try
    catch (...) { // catch в случае возникновения ошибки
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
        DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
    } // end catch
}

void __fastcall TDeloForm::Button2Click (TObject *Sender)
{ // Закладка Перевод задолженников, действие по кнопке Выбор студентов
    if (ComboBox5 -> Text == "" || Edit11 -> Text == "")
        ShowMessage ("Введите все данные");
    else { // else if проверки на ввод данных
        // поиск инкремента группы по номеру и виду обучения
        i_gr = search_increment_group (Edit11 -> Text, ComboBox5 -> ItemIndex);
        if (!i_gr.IsNull ()) { // if IsNull
            DataModule1 -> People_PartFDQuery -> Close ();
            DataModule1 -> People_PartFDQuery -> SQL -> Clear ();
            DataModule1 -> People_PartFDQuery -> SQL -> Add
                ("SELECT NOMER, FAM, NAME, OTCH, INC_GROUP, N_GROUP, KURS, VID_EDU, N_FOUND FROM PEOPLE WHERE (N_FAC=" +
                AnsiString (nom_fac) +
                ") AND (STATUS_PEOPLE=1) AND (STATUS_KURS=1) AND (INC_GROUP=" +
                VarToStr (i_gr) + ") ORDER BY FAM, NAME, OTCH");
            DataModule1 -> People_PartFDQuery -> Open ();

            rec = DataModule1 -> People_PartFDQuery -> RecordCount;
            if (!rec) {
                DataModule1 -> People_PartFDQuery -> Close ();
                ShowMessage (
                    "В этой группе нет студентов не переведенных на следующий курс!");
                Edit11 -> SetFocus ();
                return;
            }
            for (int i = 0; i < 2; i++) { // for1
                mas_fio_nomer[i] = new AnsiString[rec];
            } // end for 1
            DualListDlg = new TDualListDlg (this);
            DualListDlg -> Caption = "Выбор студентов для перевода";
            DualListDlg -> SrcList -> Items -> Clear ();
            DualListDlg -> DstList -> Items -> Clear ();

            AnsiString s1, s2, ol_fam, n_fam;
            ol_fam = "";
            for (int i = 0; i < rec; i++) { // for 2
                s1 = " " + DataModule1 -> People_PartFDQueryNAME -> Value.SubString
                    (1, 1) + ".";
                s2 = " " + DataModule1 -> People_PartFDQueryOTCH -> Value.SubString
                    (1, 1) + ".";
                n_fam = DataModule1 -> People_PartFDQueryFAM -> Value + s1 + s2;

                if (n_fam == ol_fam) { // if
                    mas_fio_nomer[0][i] =
                        AnsiString (DataModule1 -> People_PartFDQueryFAM -> Value +
                        " " + DataModule1 -> People_PartFDQueryNAME -> Value + " " +
                        DataModule1 -> People_PartFDQueryOTCH -> Value);
                    DualListDlg -> SrcList -> Items -> AddObject
                        (DataModule1 -> People_PartFDQueryFAM -> Value + " " +
                        DataModule1 -> People_PartFDQueryNAME -> Value + " " +
                        DataModule1 -> People_PartFDQueryOTCH -> Value,
                        (TObject *)
                        (DataModule1 -> People_PartFDQueryNOMER -> Value));

                } // end if
                else { // else
                    mas_fio_nomer[0][i] = n_fam;
                    // DualListDialog2 -> List1 -> Add (n_fam);
                    DualListDlg -> SrcList -> Items -> AddObject (n_fam,
                        (TObject *)
                        (DataModule1 -> People_PartFDQueryNOMER -> Value));

                } // end else
                mas_fio_nomer[1][i] =
                    AnsiString (DataModule1 -> People_PartFDQueryNOMER -> Value);
                ol_fam = n_fam;
                DataModule1 -> People_PartFDQuery -> Next ();
            } // end for 2

            DualListDlg -> ShowModal ();

            if (DataModule2 -> printdlg == true) {
                if (0 == DualListDlg -> DstList -> Items -> Count)
                { // if  если не выбрано ни одного студента в   FOutList
                    DataModule1 -> People_PartFDQuery -> Close ();
                    ShowMessage ("Вы не выбрали ни одного студента!");
                    Edit11 -> Text = "";
                    ComboBox5 -> ItemIndex = -1;
                    // удаляем массив
                    for (int i = 0; i < 2; i++)
                        delete[]mas_fio_nomer[i];
                    // delete[]mas_fio_nomer;
                    return;
                } // end if  не выбрано ни одного студента в   FOutList

                ListBox2 -> Visible = true;
                for (int i = 0; i < DualListDlg -> DstList -> Items -> Count;
                i++) // (int i = 0; i < DualListDialog2 -> List2 -> Count; i++)
                { // for 3
                    if (i < 9) {
                        // ListBox2 -> Items -> Add ("0"+AnsiString (i+1)+". "+DualListDialog2 -> List2 -> Strings[i]);
                        ListBox2 -> Items -> AddObject
                            ("0" + AnsiString (i + 1) + ". " +
                            DualListDlg -> DstList -> Items -> Strings[i],
                            DualListDlg -> DstList -> Items -> Objects[i]);
                    }
                    else {
                        // ListBox2 -> Items -> Add (AnsiString (i+1)+". "+DualListDialog2 -> List2 -> Strings[i]);
                        ListBox2 -> Items -> AddObject
                            (AnsiString (i + 1) + ". " +
                            DualListDlg -> DstList -> Items -> Strings[i],
                            DualListDlg -> DstList -> Items -> Objects[i]);
                    }
                } // end for 3
            } // Execute ();
            else { // else  если нажали кнопку отменить, не выбрав ни одного студента
                DataModule1 -> People_PartFDQuery -> Close ();
                ShowMessage ("Вы не выбрали ни одного студента!");
                Edit11 -> Text = "";
                ComboBox5 -> ItemIndex = -1;
                // удаляем массив
                delete DualListDlg;
                for (int i = 0; i < 2; i++)
                    delete[]mas_fio_nomer[i];
                // delete[]mas_fio_nomer;

                return;
            } // end  else
            Label35 -> Visible = true;
            Panel6 -> Visible = true;
            Label33 -> Enabled = true;
            Label34 -> Enabled = true;
            Edit12 -> Enabled = true;
            DateTimePicker2 -> Enabled = true;

        } // end if IsNull
        else
            MessageBox (0, "Не найден указанный номер группы", "", MB_OK);
    } // else if проверки на ввод данных
}

void __fastcall TDeloForm::Label35Click (TObject *Sender) {

    DataModule1 -> Prikaz_KursFDQuery -> Close ();
    DataModule1 -> Prikaz_KursFDQuery -> SQL -> Clear ();
    DataModule1 -> Prikaz_KursFDQuery -> SQL -> Add
        ("SELECT NOMER, N_KURS, D_PRIKAZ_KURS, N_PRIKAZ_KURS, N_FAC, VID_EDU FROM PRIKAZ_KURS Prikaz_kurs"
        );
    DataModule1 -> Prikaz_KursFDQuery -> Open ();

    DataModule1 -> People_KursFDQuery -> Close ();
    DataModule1 -> People_KursFDQuery -> ParamByName ("GROUP") -> AsInteger = i_gr;
    DataModule1 -> People_KursFDQuery -> Open ();

    for (int i = 0; i < ListBox2 -> Items -> Count; i++) { // for i
        AnsiString List_text = ListBox2 -> Items -> Strings[i];
        int j = List_text.Pos ('.'); // Урезаем запись до нужной для базы данных
        List_text.Delete (1, j + 1);
        for (int j = 0; j < rec; j++) { // for j
            TLocateOptions Opts;
            DataModule1 -> People_KursFDQuery -> Locate ("NOMER",
                (int) (ListBox2 -> Items -> Objects[i]), Opts);
            DataModule1 -> People_KursFDQuery -> Edit ();
            DataModule1 -> People_KursFDQuerySTATUS_KURS -> Value = 0;
            // переведен на следующий курс
            int n = DataModule1 -> People_KursFDQueryNOMER -> Value;
            int k = DataModule1 -> People_KursFDQueryKURS -> Value;
            DataModule1 -> People_KursFDQuery -> ApplyUpdates ();
            DataModule1 -> People_KursFDQuery -> CommitUpdates ();

            DataModule1 -> Prikaz_KursFDQuery -> Insert ();
            DataModule1 -> Prikaz_KursFDQueryNOMER -> Value = n;
            DataModule1 -> Prikaz_KursFDQueryN_KURS -> Value = k;
            DataModule1 -> Prikaz_KursFDQueryD_PRIKAZ_KURS -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker2 -> Date);
            DataModule1 -> Prikaz_KursFDQueryN_PRIKAZ_KURS -> Value =
                StrToInt (Edit12 -> Text);
            DataModule1 -> Prikaz_KursFDQueryN_FAC -> Value = nom_fac;
            DataModule1 -> Prikaz_KursFDQueryVID_EDU -> Value =
                ComboBox5 -> ItemIndex;
            DataModule1 -> Prikaz_KursFDQuery -> ApplyUpdates ();
            DataModule1 -> Prikaz_KursFDQuery -> CommitUpdates ();
            break;
        } // end for j
    } // end for i

    for (int i = 0; i < 2; i++)
        delete[]mas_fio_nomer[i]; // delete[] mas_fio_nomer;

    // очищение всех данных из компонентов и передача фокуса на вид обучения
    ListBox2 -> Visible = false;
    ListBox2 -> Clear ();
    Label35 -> Visible = false;
    Panel6 -> Visible = false;
    // -----
    Label33 -> Enabled = false;
    Label34 -> Enabled = false;
    Edit12 -> Enabled = false;
    Edit12 -> Text = "";
    DateTimePicker2 -> Enabled = false;
    DateTimePicker2 -> Date = Now ();
    DateTimePicker2 -> Time = StrToTime ("00:00");
    // -----
    Edit11 -> Text = "";
    ComboBox5 -> ItemIndex = -1;
    ComboBox5 -> SetFocus ();
    DataModule1 -> People_KursFDQuery -> Close ();
    DataModule1 -> Prikaz_KursFDQuery -> Close ();

}

void __fastcall TDeloForm::ComboBox1Change (TObject *Sender) {
    ListBox1 -> Clear ();
    DualListDlg = new TDualListDlg (this);
    DualListDlg -> SrcList -> Items -> Clear ();
    DualListDlg -> DstList -> Items -> Clear ();

    Panel7 -> Visible = True;
}
/*
 void __fastcall TDeloForm::Edit1Change (TObject *Sender)
 {
 ListBox1 -> Clear ();
 DualListDialog1 -> List2 -> Clear ();
 } */

void __fastcall TDeloForm::BitBtn8Click (TObject *Sender) {
    if (MessageDlg
        ("Вы уверены что хотите, перевести всех студентов на следующий курс?",
        mtConfirmation, TMsgDlgButtons () << mbYes << mbNo, 0) == mrYes)
        { // if
        if (MessageDlg ("Переводные приказы находятся у вас в руках?",
            mtConfirmation, TMsgDlgButtons () << mbYes << mbNo, 0) == mrYes)
        { // if
            DateTimePicker1 -> Date = Now ();
            DateTimePicker1 -> Time = 0;
            if (ComboBox1 -> ItemIndex == -1)
                ShowMessage ("Введите вид обучения");
            else { // else проверка на вид обучения
                curent_date = cur_d (); // находим текущую дату
                String year_cur = DateToStr (curent_date).SubString (7, 4);
                // находим текущий год

                sql_head =
                    "SELECT INC_GROUP, VID_EDU, GOD, N_GROUP FROM INCREMENT_GROUP WHERE N_GROUP<>'000' and (VID_EDU=:EDU)";
                AnsiString sql_end;
                if (ComboBox1 -> ItemIndex)
                    sql_end = " N_GROUP NOT LIKE '_6_' ORDER BY N_GROUP";
                // заочное
                else
                    sql_end = " N_GROUP NOT LIKE '_5_' ORDER BY N_GROUP";
                // дневное
                switch (nom_fac) { // switch
                case 1:
                    sql_dop = "AND N_GROUP STARTING WITH '1' AND"; // СИиЕ
                    break;
                case 2:
                    sql_dop = "AND N_GROUP STARTING WITH '2' AND"; // МВС
                    break;
                case 3:
                    sql_dop = "AND N_GROUP STARTING WITH '0' AND";
                    // ОФКиТ
                    break;
                case 4:
                    sql_dop = "AND N_GROUP STARTING WITH '4' AND";
                    // Институт туризма
                    break;

                } // end switch

                DataModule1 -> Increment_GroupFDQuery -> SQL -> Clear ();
                DataModule1 -> Increment_GroupFDQuery -> SQL -> Add
                    (sql_head + sql_dop + sql_end);
                DataModule1 -> Increment_GroupFDQuery -> ParamByName ("EDU")
                    -> AsSmallInt = ComboBox1 -> ItemIndex;
                DataModule1 -> Increment_GroupFDQuery -> Open ();
                DataModule1 -> Increment_GroupFDQuery -> Last ();
                // ---открытие Query для изменения номеров групп
                if (year_cur.ToInt ()
                    == DataModule1 -> Increment_GroupFDQueryGOD -> Value)
                { // if если текущий год = году с таблице инкрементов групп, то переводим на следующий курс
                    DataModule1 -> Inc_Group_OldFDQuery -> Open ();
                    // открытие Query для сохранения архива номеров групп
                    for (int i = 0;
                    i < DataModule1 -> Increment_GroupFDQuery -> RecordCount; i++)
                    { // for по количеству групп на курсе
                        AnsiString grup =
                            DataModule1 -> Increment_GroupFDQueryN_GROUP -> Value;
                        AnsiString kurs = grup.SubString (2, 1);
                        kurs = IntToStr (kurs.ToInt () + 1);
                        grup.Delete (2, 1).Insert (kurs, 2);
                        // увеличиваем 2-ой символ в номере группы на значение kurs

                        DataModule1 -> Increment_GroupFDQuery -> Edit ();

                        DataModule1 -> Increment_GroupFDQueryN_GROUP -> Value
                            = grup;
                        DataModule1 -> Increment_GroupFDQueryGOD -> Value =
                            year_cur.ToInt () + 1;
                        // ---  архив номеров групп
                        DataModule1 -> Inc_Group_OldFDQuery -> Insert ();
                        DataModule1 -> Inc_Group_OldFDQueryINC_GROUP -> Value =
                            DataModule1 -> Increment_GroupFDQueryINC_GROUP -> Value;
                        DataModule1 -> Inc_Group_OldFDQueryN_GROUP -> Value = grup;
                        DataModule1 -> Inc_Group_OldFDQueryVID_EDU -> Value =
                            DataModule1 -> Increment_GroupFDQueryVID_EDU -> Value;
                        DataModule1 -> Inc_Group_OldFDQueryGOD -> Value =
                            year_cur.ToInt () + 1;
                        DataModule1 -> Inc_Group_OldFDQueryDESCRIBE -> Value =
                            year_cur + "/" + (year_cur.ToInt () + 1) +
                            " учебный год";
                        DataModule1 -> Inc_Group_OldFDQuery -> Post ();
                        // ------
                        DataModule1 -> Increment_GroupFDQuery -> Post ();
                        DataModule1 -> Increment_GroupFDQuery -> Prior ();
                    } // end for

                    DataModule1 -> Increment_GroupFDQuery -> ApplyUpdates ();
                    DataModule1 -> Increment_GroupFDQuery -> CommitUpdates ();

                    DataModule1 -> Inc_Group_OldFDQuery -> ApplyUpdates ();
                    DataModule1 -> Inc_Group_OldFDQuery -> CommitUpdates ();

                    DM2 -> Increment_GroupFDTable -> Close ();
                    DM2 -> Increment_GroupFDTable -> Open ();

                    // SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND
                    // FROM PEOPLE People

                    DataModule1 -> PeopleUpFDQuery -> Close ();
                    DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
                    DataModule1 -> PeopleUpFDQuery -> SQL -> Add
                        ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE WHERE (STATUS_PEOPLE=1) AND (N_FAC=:FAC) AND (VID_EDU=:EDU) ORDER BY N_GROUP"
                        );
                    DataModule1 -> PeopleUpFDQuery -> ParamByName ("FAC")
                        -> AsSmallInt = nom_fac;
                    DataModule1 -> PeopleUpFDQuery -> ParamByName ("EDU")
                        -> AsSmallInt = ComboBox1 -> ItemIndex;
                    DataModule1 -> PeopleUpFDQuery -> Open ();
                    DataModule1 -> PeopleUp_CountFDQuery -> Close ();
                    DataModule1 -> PeopleUp_CountFDQuery -> SQL -> Clear ();
                    DataModule1 -> PeopleUp_CountFDQuery -> SQL -> Add
                        ("SELECT COUNT (NOMER) FROM PEOPLE WHERE (STATUS_PEOPLE=1) AND (N_FAC=:FAC) AND (VID_EDU=:EDU)"
                        );
                    DataModule1 -> PeopleUp_CountFDQuery -> ParamByName ("FAC")
                        -> AsSmallInt = nom_fac;
                    DataModule1 -> PeopleUp_CountFDQuery -> ParamByName ("EDU")
                        -> AsSmallInt = ComboBox1 -> ItemIndex;
                    DataModule1 -> PeopleUp_CountFDQuery -> Open ();
                    // ---- Прогресс при присваивании каждому студенту N_Group and KURS
                    ProgressBar1 -> Visible = true;
                    ProgressBar1 -> Min = 0;
                    ProgressBar1 -> Max =
                        DataModule1 -> PeopleUp_CountFDQueryCOUNT -> Value;
                    DataModule1 -> PeopleUpFDQuery -> First ();
                    for (int i = ProgressBar1 -> Min; i < ProgressBar1 -> Max; i++)
                    {
                        ProgressBar1 -> Position = i;
                        if (!DataModule1 -> Increment_GroupFDQuery -> Active)
                            DataModule1 -> Increment_GroupFDQuery -> Open ();

                        Variant v = DataModule1 -> Increment_GroupFDQuery -> Lookup
                            ("INC_GROUP",
                            DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value,
                            "N_GROUP");
                        if (!v.IsNull ()) {
                            DataModule1 -> PeopleUpFDQuery -> Edit ();
                            DataModule1 -> PeopleUpFDQueryKURS -> Value =
                                DataModule1 -> PeopleUpFDQueryKURS -> Value + 1;
                            DataModule1 -> PeopleUpFDQueryN_GROUP -> Value =
                                v.AsType (varString);
                            DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 1;
                            // Дмитрий добавил
                            DataModule1 -> PeopleUpFDQuery -> Post ();
                        }
                        DataModule1 -> PeopleUpFDQuery -> Next ();
                        // do something with record...
                    }
                    // -----
                    DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
                    DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
                    ProgressBar1 -> Visible = false;
                } // end if текущий год
                else { // else ничего не делаем для перевода
                    ShowMessage ("Вы уже изменили номера групп!");

                } // end else
                Panel7 -> Visible = true;
                if (ComboBox1 -> ItemIndex) { // если вид обучение заочное
                    RadioGroup1 -> Items -> Clear ();
                    RadioGroup1 -> Items -> Add ("2 курс");
                    RadioGroup1 -> Items -> Add ("3 курс");
                    RadioGroup1 -> Items -> Add ("4 курс");
                    RadioGroup1 -> Items -> Add ("5 курс");
                    RadioGroup1 -> ItemIndex = -1;
                } // end if
                else { // если вид обучения дневное
                    RadioGroup1 -> Items -> Clear ();
                    RadioGroup1 -> Items -> Add ("2 курс");
                    RadioGroup1 -> Items -> Add ("3 курс");
                    RadioGroup1 -> Items -> Add ("4 курс");
                    RadioGroup1 -> ItemIndex = -1;
                } // end else

            } // end else проверка на вид обучения
        }
    }
}

void __fastcall TDeloForm::RadioGroup1Click (TObject * Sender) {
    if (RadioGroup1 -> ItemIndex != -1) { // если выбрали нужный курс
        kurs = AnsiString (RadioGroup1 -> ItemIndex + 2);
        // переменная для номера курса уже переведенного
        if (mas) { // массив  очищения
            for (int i = 0; i < 2; i++)
                delete[]mas_fio_nomer[i];
            // delete[]mas_fio_nomer;
            mas = 0;
        } // конец цикла массив

        DataModule1 -> People_PartFDQuery -> Close ();
        DataModule1 -> People_PartFDQuery -> SQL -> Clear ();
        DataModule1 -> People_PartFDQuery -> SQL -> Add
            ("SELECT NOMER, FAM, NAME, OTCH, INC_GROUP, N_GROUP, KURS, VID_EDU, N_FOUND FROM PEOPLE WHERE (STATUS_KURS=1) AND (STATUS_PEOPLE=1) AND (N_FAC=:FAC) AND (VID_EDU=:EDU) AND (KURS=:K) ORDER BY FAM, NAME, OTCH"
            );
        DataModule1 -> People_PartFDQuery -> ParamByName ("FAC") -> AsSmallInt =
            nom_fac;
        DataModule1 -> People_PartFDQuery -> ParamByName ("EDU") -> AsSmallInt =
            ComboBox1 -> ItemIndex;
        DataModule1 -> People_PartFDQuery -> ParamByName ("K") -> AsSmallInt =
            RadioGroup1 -> ItemIndex + 2;
        DataModule1 -> People_PartFDQuery -> Open ();

        DataModule1 -> People_Part_CountFDQuery -> Close ();
        DataModule1 -> People_Part_CountFDQuery -> SQL -> Clear ();
        DataModule1 -> People_Part_CountFDQuery -> SQL -> Add
            ("SELECT COUNT (NOMER) FROM PEOPLE WHERE (STATUS_KURS=1) AND (STATUS_PEOPLE=1) AND (N_FAC=:FAC) AND (VID_EDU=:EDU) AND (KURS=:K)"
            );
        DataModule1 -> People_Part_CountFDQuery -> ParamByName ("FAC") -> AsSmallInt =
            nom_fac;
        DataModule1 -> People_Part_CountFDQuery -> ParamByName ("EDU") -> AsSmallInt =
            ComboBox1 -> ItemIndex;
        DataModule1 -> People_Part_CountFDQuery -> ParamByName ("K") -> AsSmallInt =
            RadioGroup1 -> ItemIndex + 2;
        DataModule1 -> People_Part_CountFDQuery -> Open ();

        rec = DataModule1 -> People_Part_CountFDQueryCOUNT -> Value;

        for (int i = 0; i < 2; i++) { // for1
            mas_fio_nomer[i] = new AnsiString[rec];
            mas = 1;
        } // end for 1

        DualListDlg = new TDualListDlg (this);
        DualListDlg -> SrcList -> Items -> Clear ();
        DualListDlg -> DstList -> Items -> Clear ();

        for (int i = 0; i < rec; i++) { // for 2

            mas_fio_nomer[0][i] =
                AnsiString (DataModule1 -> People_PartFDQueryFAM -> Value + " " +
                DataModule1 -> People_PartFDQueryNAME -> Value + " " +
                DataModule1 -> People_PartFDQueryOTCH -> Value + " " +
                DataModule1 -> People_PartFDQueryN_GROUP -> Value + " гр.");
            // DualListDialog1 -> List1 -> Add (mas_fio_nomer[0][i]);

            DualListDlg -> SrcList -> Items -> AddObject (mas_fio_nomer[0][i],
                (TObject*) (DataModule1 -> People_PartFDQueryNOMER -> Value));

            mas_fio_nomer[1][i] =
                AnsiString (DataModule1 -> People_PartFDQueryNOMER -> Value);
            DataModule1 -> People_PartFDQuery -> Next ();
        } // end for 2

        // -------------

        DualListDlg -> ShowModal ();

        if (DataModule2 -> printdlg == true)
            // (DualListDialog1 -> Execute ())
        { // if  Execute
            ListBox1 -> Visible = true;
            for (int i = 0; i < DualListDlg -> DstList -> Items -> Count;
            i++) // (int i = 0; i < DualListDialog1 -> List2 -> Count; i++)
            { // for 3
                // if (i<9) ListBox1 -> Items -> Add ("0"+AnsiString (i+1)+". "+DualListDialog1 -> List2 -> Strings[i]);
                // else    ListBox1 -> Items -> Add (AnsiString (i+1)+". "+DualListDialog1 -> List2 -> Strings[i]);

                if (i < 9)
                    ListBox1 -> Items -> Add ("0" + AnsiString (i + 1) + ". " +
                    DualListDlg -> DstList -> Items -> Strings[i]);
                else
                    ListBox1 -> Items -> Add (AnsiString (i + 1) + ". " +
                    DualListDlg -> DstList -> Items -> Strings[i]);

            } // end for 3
            // ------------
            if (DualListDlg -> DstList -> Items -> Count > 0)
                // (DualListDialog1 -> List2 -> Count>0)
            { // если выбран хотябы один студент
                Panel1 -> Visible = true;
                Label29 -> Enabled = true;
                Label30 -> Enabled = true;
                Edit10 -> Enabled = true;
                DateTimePicker1 -> Enabled = true;
            } // end if выбран студент
        } // end if   Execute
        else { // else - если в диалоге нажали Закрыть, то надо удалить массив
            delete DualListDlg;
            if (mas) {
                for (int i = 0; i < 2; i++)
                    delete[]mas_fio_nomer[i];
                // delete[]mas_fio_nomer;
                mas = 0;
            }
            DataModule1 -> People_PartFDQuery -> Close ();
        } // end else

    } // если выбрали нужный курс
}

void __fastcall TDeloForm::Panel1Click (TObject * Sender) {
    if (Edit10 -> Text == "")
        ShowMessage ("Введите данные по дате и номеру приказа");
    else { // else проверки на ввод данных
        DataModule1 -> Prikaz_KursFDQuery -> Close ();
        DataModule1 -> Prikaz_KursFDQuery -> SQL -> Clear ();
        DataModule1 -> Prikaz_KursFDQuery -> SQL -> Add
            ("SELECT NOMER, N_KURS, D_PRIKAZ_KURS, N_PRIKAZ_KURS, N_FAC, VID_EDU FROM PRIKAZ_KURS Prikaz_kurs"
            );
        DataModule1 -> Prikaz_KursFDQuery -> Open ();

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, D_INCLUDE, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE WHERE (STATUS_PEOPLE=1) AND (N_FAC=:FAC) AND (VID_EDU=:EDU) ORDER BY N_GROUP"
            );
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("FAC") -> AsSmallInt = nom_fac;
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("EDU") -> AsSmallInt =
            ComboBox1 -> ItemIndex;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        // -------
        ProgressBar1 -> Visible = true;
        ProgressBar1 -> Min = 0;
        // -------

        for (int i = 0; i < ListBox1 -> Items -> Count; i++) { // for i

            ProgressBar1 -> Max = ListBox1 -> Items -> Count;
            ProgressBar1 -> Position = i;
            AnsiString List_text = ListBox1 -> Items -> Strings[i];
            int j = List_text.Pos ('.');
            // Урезаем запись до нужной для базы данных
            List_text.Delete (1, j + 1);
            for (int j = 0; j < rec; j++) { // for j
                if (List_text == mas_fio_nomer[0][j]) { // if
                    int n = mas_fio_nomer[1][j].ToInt ();
                    int k = kurs.ToInt ();
                    // проверка на повторный перевод на этот же курс
                    Variant prov[2];
                    prov[0] = Variant (n);
                    // номер студента
                    prov[1] = Variant (k); // номер курса
                    Variant LookupResults =
                        DataModule1 -> Prikaz_KursFDQuery -> Lookup ("NOMER;N_KURS",
                        VarArrayOf (prov, 1), "NOMER;N_KURS");
                    if (LookupResults.IsNull ())
                    { // проверка на повторный перевод на этот же курс
                        DataModule1 -> Prikaz_KursFDQuery -> Insert ();
                        DataModule1 -> Prikaz_KursFDQueryNOMER -> Value = n;
                        DataModule1 -> Prikaz_KursFDQueryN_KURS -> Value = k;
                        DataModule1 -> Prikaz_KursFDQueryD_PRIKAZ_KURS -> Value =
                            DateTimeToSQLTimeStamp (DateTimePicker1 -> Date);
                        DataModule1 -> Prikaz_KursFDQueryN_PRIKAZ_KURS -> Value =
                            StrToInt (Edit10 -> Text);
                        DataModule1 -> Prikaz_KursFDQueryN_FAC -> Value = nom_fac;
                        DataModule1 -> Prikaz_KursFDQueryVID_EDU -> Value =
                            ComboBox1 -> ItemIndex;
                        DataModule1 -> Prikaz_KursFDQuery -> ApplyUpdates ();
                        DataModule1 -> Prikaz_KursFDQuery -> CommitUpdates ();

                        /* mas_fio_nomer[0][j]="";
                         mas_fio_nomer[1][j]=""; */ break;
                    } // проверка на повторный перевод на этот же курс
                    else {
                        AnsiString mes = "Студент " + List_text +
                            " уже был переведен на " + kurs +
                            " курс.\nДобавить новый приказ?";
                        // !!!if (Application -> MessageBox (mes.c_str (),"Внимание", MB_OKCANCEL) == IDOK)
                        if (MessageDlg (mes.c_str (), mtWarning,
                            TMsgDlgButtons () << mbOK << mbCancel, 0) == 1)
                            // ShowMessage ("Студент "+List_text+" уже был переведен на "+kurs+" курс!");
                        {
                            DataModule1 -> Prikaz_KursFDQuery -> Insert ();
                            DataModule1 -> Prikaz_KursFDQueryNOMER -> Value = n;
                            DataModule1 -> Prikaz_KursFDQueryN_KURS -> Value = k;
                            DataModule1 -> Prikaz_KursFDQueryD_PRIKAZ_KURS -> Value
                                = DateTimeToSQLTimeStamp (DateTimePicker1 -> Date);
                            DataModule1 -> Prikaz_KursFDQueryN_PRIKAZ_KURS -> Value
                                = StrToInt (Edit10 -> Text);
                            DataModule1 -> Prikaz_KursFDQueryN_FAC -> Value =
                                nom_fac;
                            DataModule1 -> Prikaz_KursFDQueryVID_EDU -> Value =
                                ComboBox1 -> ItemIndex;
                            DataModule1 -> Prikaz_KursFDQuery -> ApplyUpdates ();
                            DataModule1 -> Prikaz_KursFDQuery -> CommitUpdates ();

                            /* mas_fio_nomer[0][j]="";
                             mas_fio_nomer[1][j]=""; */ break;
                        }
                        else {
                            /* mas_fio_nomer[0][j]="";
                             mas_fio_nomer[1][j]=""; */ break;
                        }
                    }

                } // end if
            } // end for j
        } // end for i
        ProgressBar1 -> Visible = false;
        // -----------------
        /* for (int kkk=0;kkk<rec;kkk++)
         { //for kkk
         if (mas_fio_nomer[0][kkk]!="")
         { //if
         int nom=mas_fio_nomer[1][kkk].ToInt ();
         int k=kurs.ToInt ();
         //проверка на повторный перевод на этот же курс
         Variant proverka[2];
         proverka[0] = Variant (nom);    // номер студента
         proverka[1] = Variant (k);    // номер курса
         Variant Results=DataModule1 -> Prikaz_KursQuery -> Lookup ("NOMER;N_KURS", VarArrayOf (proverka, 1), "NOMER;N_KURS");
         if (!Results.IsNull ())
         {  //если нет записи
         TLocateOptions Opts;
         DataModule1 -> PeopleUpQuery -> Locate ("NOMER", (mas_fio_nomer[1][kkk]).ToInt (), Opts);
         DataModule1 -> PeopleUpQuery -> Edit ();
         DataModule1 -> PeopleUpQuerySTATUS_KURS -> Value=0;  //   ПЕРЕВЕДЕН на следующий курс

         DataModule1 -> PeopleUpQuery -> ApplyUpdates ();
         DataModule1 -> PeopleUpQuery -> CommitUpdates ();
         mas_fio_nomer[0][kkk]="";
         mas_fio_nomer[1][kkk]="";
         } //конец проверки на отсутствие записи
         else
         {
         mas_fio_nomer[0][kkk]="";
         mas_fio_nomer[1][kkk]="";
         }
         }//end if
         }//end for kkk */
        // ----------------
        for (int i = 0; i < ListBox1 -> Items -> Count; i++) {
            AnsiString List_text = ListBox1 -> Items -> Strings[i];
            int j = List_text.Pos ('.');
            // Урезаем запись до нужной для базы данных
            List_text.Delete (1, j + 1);
            for (int kkk = 0; kkk < rec; kkk++) {
                if (List_text == mas_fio_nomer[0][kkk]) {
                    FDStoredProc1 -> ParamByName ("NOMER") -> AsString =
                        mas_fio_nomer[1][kkk];
                    FDStoredProc1 -> Prepare ();
                    FDStoredProc1 -> ExecProc ();
                    FDStoredProc1 -> Unprepare ();
                    FDStoredProc1 -> Close ();
                }
            }
        }

        if (mas) {
            for (int i = 0; i < 2; i++)
                delete[]mas_fio_nomer[i];
            // delete[]mas_fio_nomer;
            mas = 0;
        }

        // очищение всех данных из компонентов и передача фокуса на вид обучения
        ListBox1 -> Clear ();
        ListBox1 -> Visible = false;
        // Label3 -> Visible=false;
        Panel1 -> Visible = true;
        // -----
        Label29 -> Enabled = false;
        Label30 -> Enabled = false;
        Edit10 -> Enabled = false;
        Edit10 -> Text = "";
        DateTimePicker1 -> Enabled = false;
        DateTimePicker1 -> Date = Now ();
        DateTimePicker1 -> Time = StrToTime ("00:00");
        // -----
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> Prikaz_KursFDQuery -> Close ();
        DataModule1 -> People_PartFDQuery -> Close ();
    } // else проверки на ввод данных
}

void __fastcall TDeloForm::BitBtn9Click (TObject * Sender)
{ // на закладке Академические отпуска, действие по кнопке
    // Выбрать студента для отправления его в академический отпуск

    i_gr = search_increment_group (Edit1 -> Text, ComboBox6 -> ItemIndex);
    if (!i_gr.IsNull ()) { // выбираем студентов только этой группы
        // sql_old="SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND FROM PEOPLE People";

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE People WHERE (N_FAC=" +
            AnsiString (nom_fac) +
            ") AND (STATUS_PEOPLE=1) AND (INC_GROUP=:I_GR) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("I_GR") -> AsInteger = i_gr;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        if (DataModule1 -> PeopleUpFDQuery -> RecordCount)
        { // если в группе есть студенты, то выполняем:
            Panel8 -> Visible = true; // панель с уходом в а/о

            DataModule1 -> HolidayFDQuery -> Open ();
            DataModule1 -> HolidayFDQuery -> Insert ();
        }
        else { // в выбранной группе нет ни одного студента
            ShowMessage (
                "В выбранной группе нет ни одного студента или выбрали группу не с вашего факультета!");
            Edit1 -> SetFocus ();
        }

    }
    else { // если не вернуло инкремент группы, то такой группы нет
        ShowMessage ("Не найден номер группы!");
        Edit1 -> SetFocus ();
    }

}

void __fastcall TDeloForm::RadioGroup2Click (TObject * Sender)
{ // закладка Академические отпуска -- нажатие на RadioGroup показывает разные панели
    switch (RadioGroup2 -> ItemIndex) { // switch
    case -1: // отмена всех действий
        Panel9 -> Visible = false;
        // выбор номера группы и вида обучения
        Panel10 -> Visible = false;
        // панель для продления и выхода из а/о
        Panel8 -> Visible = false; // уход в а/о
        break;
    case 0: // уход в академический отпуск
        Panel9 -> Visible = true;
        // выбор номера группы и вида обучения
        Panel10 -> Visible = false;
        // панель для продления и выхода из а/о
        break;
        /* case 1: //продление академического отпуска
         Panel9 -> Visible=false; //выбор номера группы и вида обучения
         Panel8 -> Visible=false; //панель для ухода в а/о
         Panel10 -> Visible=true; //показ панели для продления и выхода из а/о
         //занесение в Label50 текста выбранного действия
         Label50 -> Caption=RadioGroup2 -> Items -> Strings[RadioGroup2 -> ItemIndex];

         break; */ default: // выход из академического отпуска
        Panel9 -> Visible = false;
        // выбор номера группы и вида обучения
        Panel8 -> Visible = false; // панель для ухода в а/о

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE People WHERE (N_FAC=" +
            AnsiString (nom_fac) + ") AND (STATUS_PEOPLE=3)");
        DataModule1 -> PeopleUpFDQuery -> Open ();

        if (DataModule1 -> PeopleUpFDQuery -> RecordCount)
        { // если в группе есть студенты, то выполняем:

            Panel10 -> Visible = true;
            // показ панели для продления и выхода из а/о
            // занесение в Label50 текста выбранного действия
            Label50 -> Caption =
                RadioGroup2 -> Items -> Strings[RadioGroup2 -> ItemIndex];
            if (RadioGroup2 -> ItemIndex == 1)
            { // if продление академического отпуска
                Edit15 -> Visible = false; // номер группы
                Label49 -> Caption = "Причина продления:";
                Label48 -> Visible = true;
                // А/о продлен        по: (текст)
                DateTimePicker8 -> Visible = true;
                // А/о продлен        по:
                Label47 -> Caption = "А/о продлен         c:";
                DBLookupComboBox8 -> Visible = true; // причина отпуска
            } // end if продление академического отпуска
            else { // else выход из академического отпуска
                Edit15 -> Visible = true; // номер группы
                Label49 -> Caption = "№ группы:";
                Label48 -> Visible = false;
                // А/о продлен        по: (текст)
                DateTimePicker8 -> Visible = false;
                // А/о продлен        по:
                Label47 -> Caption = "Считать вернувшимся с:";
                DBLookupComboBox8 -> Visible = false; // причина отпуска
            } // end else выход из академического отпуска

            DataModule1 -> HolidayFDQuery -> Open ();
            DataModule1 -> HolidayFDQuery -> Insert ();
        }
        else { // в выбранной группе нет ни одного студента
            ShowMessage (
                "На вашем факультете нет студентов в академическом отпуске!");
            RadioGroup2 -> ItemIndex = -1;
        }

        break;
    } // end switch
}

void __fastcall TDeloForm::BitBtn11Click (TObject * Sender)
{ // Закладка Академические отпуска, действие по кнопке Отменить
    // для отмены ухода в академический отпуск
    DataModule1 -> HolidayFDQuery -> CancelUpdates ();
    DataModule1 -> PeopleUpFDQuery -> Close ();
    // ----------
    Panel9 -> Visible = false;
    Edit1 -> Text = ""; // № группы
    ComboBox6 -> ItemIndex = -1; // форма обучения
    // --------------------
    Panel8 -> Visible = false;
    DBLookupComboBox3 -> KeyValue = -1; // ФИО
    DBLookupComboBox6 -> KeyValue = -1; // Причина ухода
    Edit13 -> Text = ""; // очищение № приказа
    DateTimePicker3 -> Date = Now (); // очищение даты приказа
    DateTimePicker3 -> Time = StrToTime ("00:00");
    DateTimePicker4 -> Date = Now ();
    // очищение даты начала а/о
    DateTimePicker4 -> Time = StrToTime ("00:00");
    DateTimePicker5 -> Date = Now ();
    // очищение даты окончания а/о
    DateTimePicker5 -> Time = StrToTime ("00:00");
    // ----------------------
    RadioGroup2 -> ItemIndex = -1; // выключение  RadioGroup2
}

void __fastcall TDeloForm::BitBtn10Click (TObject * Sender)
{ // Закладка Академические отпуска, действие по кнопке Сохранить
    // для ухода в академический отпуск
    try {
        TLocateOptions fl;
        if (DataModule1 -> HolidayFDQuery -> State != dsInsert)
            DataModule1 -> HolidayFDQuery -> Insert ();
        // сохранение в табл Holiday номера студента
        DataModule1 -> HolidayFDQueryNOMER -> Value = DBLookupComboBox3 -> KeyValue;
        // тип 1 -- уход в а/о; 2-- Продлен а/о;  3-- выход из а/о
        DataModule1 -> HolidayFDQueryTYPE_HOL -> Value = RadioGroup2 -> ItemIndex + 1;
        DataModule1 -> HolidayFDQueryN_HOL -> Value = DBLookupComboBox6 -> KeyValue;
        // номер  приказа
        DataModule1 -> HolidayFDQueryN_PRIKAZ_HOL -> Value = StrToInt (Edit13 -> Text);
        // дата приказа
        DataModule1 -> HolidayFDQueryD_PRIKAZ_HOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker3 -> Date);
        // дата начала а/о
        DataModule1 -> HolidayFDQueryD_BEGIN_HOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker4 -> Date);
        // дата окончания а/о
        DataModule1 -> HolidayFDQueryD_END_HOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker5 -> Date);

        DataModule1 -> HolidayFDQuery -> ApplyUpdates ();

        DataModule1 -> PeopleUpFDQuery -> Open ();
        DataModule1 -> PeopleUpFDQuery -> Locate ("NOMER",
            DBLookupComboBox3 -> KeyValue, fl);
        DataModule1 -> PeopleUpFDQuery -> Edit ();
        if (DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value == 1) {
            if (MessageDlg
                ("Этот студент был условно переведен на следующий курс. Изменить номер группы и курс?",
                mtConfirmation, TMsgDlgButtons () << mbOK << mbCancel, 0) == 1)
            { // if изменяем номер группы и курс на один меньше
                int old_kurs = DataModule1 -> PeopleUpFDQueryKURS -> Value;
                int old_gr =
                    StrToInt (DataModule1 -> PeopleUpFDQueryN_GROUP -> Value);
                if (old_kurs != 1) {
                    DataModule1 -> PeopleUpFDQueryKURS -> Value = (old_kurs - 1);
                    if (nom_fac == 3)
                    { // if это ОФКиТ - то надо спереди доставить 0
                        DataModule1 -> PeopleUpFDQueryN_GROUP -> Value =
                            "0" + IntToStr (old_gr - 10);
                    }
                    else
                        DataModule1 -> PeopleUpFDQueryN_GROUP -> Value =
                            IntToStr (old_gr - 10);
                }
            }

            DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 0;
        }
        DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 3;
        // статус для академистов
        DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = 18;
        // инкремнент для группы с номером 000
        DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();

        DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> HolidayFDQuery -> CommitUpdates ();
        // -----

        Panel9 -> Visible = false;
        Edit1 -> Text = ""; // № группы
        ComboBox6 -> ItemIndex = -1; // форма обучения
        // ---------
        Panel8 -> Visible = false;
        Edit13 -> Text = "";
        // очищение № приказа
        DateTimePicker3 -> Date = Now (); // очищение даты приказа
        DateTimePicker3 -> Time = StrToTime ("00:00");
        DateTimePicker4 -> Date = Now (); // очищение даты начала а/о
        DateTimePicker4 -> Time = StrToTime ("00:00");
        DateTimePicker5 -> Date = Now (); // очищение даты окончания а/о
        DateTimePicker5 -> Time = StrToTime ("00:00");
        RadioGroup2 -> ItemIndex = -1;
        // выключение  RadioGroup2
        // -----
    }
    catch (...) {
        ShowMessage (
            "Допущена ошибка, проверьте все данные и попробуйте еще раз!");
        DataModule1 -> HolidayFDQuery -> CancelUpdates ();
    }

}

void __fastcall TDeloForm::ComboBox6Change (TObject * Sender) {
    Panel8 -> Visible = false;
}

void __fastcall TDeloForm::BitBtn13Click (TObject * Sender)
{ // Закладка Академические отпуска, действие по кнопке Отменить
    // для отмены выхода из академического отпуска или его продления
    DataModule1 -> HolidayFDQuery -> CancelUpdates ();
    DataModule1 -> PeopleUpFDQuery -> Close ();
    // -------------
    Panel9 -> Visible = false;
    Edit1 -> Text = ""; // очищение № группы
    ComboBox6 -> ItemIndex = -1; // вид обучения
    // -------------
    Panel10 -> Visible = false;
    DBLookupComboBox7 -> KeyValue = -1; // ФИО
    DBLookupComboBox8 -> KeyValue = -1; // Причина
    Edit14 -> Text = ""; // очищение № приказа
    Edit15 -> Text = ""; // очищение № группы
    DateTimePicker6 -> Date = Now (); // очищение даты приказа
    DateTimePicker6 -> Time = StrToTime ("00:00");
    DateTimePicker7 -> Date = Now ();
    // очищение даты продления а/о  с:
    DateTimePicker7 -> Time = StrToTime ("00:00");
    DateTimePicker8 -> Date = Now ();
    // очищение даты а/о продления по:
    DateTimePicker8 -> Time = StrToTime ("00:00");
    RadioGroup2 -> ItemIndex = -1;
    // выключение  RadioGroup2
    // -----

}

void __fastcall TDeloForm::BitBtn12Click (TObject * Sender)
{ // Закладка Академические отпуска, действие по кнопке Сохранить
    // для продления академического отпуска или выхода из а/о
    try {
        TLocateOptions fl;
        if (DataModule1 -> HolidayFDQuery -> State != dsInsert)
            DataModule1 -> HolidayFDQuery -> Insert ();

        // сохранение в табл Holiday номера студента
        DataModule1 -> HolidayFDQueryNOMER -> Value = DBLookupComboBox7 -> KeyValue;
        // тип 1 -- уход в а/о; 2-- Продлен а/о;  3-- выход из а/о
        DataModule1 -> HolidayFDQueryTYPE_HOL -> Value = RadioGroup2 -> ItemIndex + 1;

        // номер  приказа
        DataModule1 -> HolidayFDQueryN_PRIKAZ_HOL -> Value = StrToInt (Edit14 -> Text);
        // дата приказа
        DataModule1 -> HolidayFDQueryD_PRIKAZ_HOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker6 -> Date);

        if (RadioGroup2 -> ItemIndex == 2) { // if выход из академического отпуска

            if (!check_fac_group (Edit15 -> Text))
                return; // проверка на номер группы и факультет

            DataModule1 -> PeopleUpFDQuery -> Open ();
            DataModule1 -> PeopleUpFDQuery -> Locate ("NOMER",
                DBLookupComboBox7 -> KeyValue, fl);
            Variant i_gr = search_increment_group (Edit15 -> Text,
                DataModule1 -> PeopleUpFDQueryVID_EDU -> Value);
            // ---------
            DataModule1 -> PeopleUpFDQuery -> Edit ();
            DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 1;
            // статус для действующего студента
            DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = i_gr;
            // инкремнент группы
            DataModule1 -> PeopleUpFDQueryN_GROUP -> Value = Edit15 -> Text;
            // номер группы
            DataModule1 -> PeopleUpFDQueryKURS -> Value =
                StrToInt (Edit15 -> Text.SubString (2, 1));
            // ---------

            // причины выхода нет, поэтому и ищем запись -- НЕТ
            DataModule1 -> HolidayFDQueryN_HOL -> Value =
                DM2 -> Cause_HolidayFDTable -> Lookup ("CAUSE_HOL", "Нет", "N_HOL");
            // Дата с которой выходит из отпуска, но заносим  в D_END_HOL
            DataModule1 -> HolidayFDQueryD_END_HOL -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker7 -> Date);
        } // end if  выход из академического отпуска
        else { // else -- продление а/о
            DataModule1 -> HolidayFDQueryN_HOL -> Value =
                DBLookupComboBox8 -> KeyValue;
            // дата начала а/о
            DataModule1 -> HolidayFDQueryD_BEGIN_HOL -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker7 -> Date);
            // дата окончания а/о
            DataModule1 -> HolidayFDQueryD_END_HOL -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker8 -> Date);

        } // end else -- продление а/о
        // ---------
        DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
        DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
        DataModule1 -> HolidayFDQuery -> ApplyUpdates ();
        DataModule1 -> HolidayFDQuery -> CommitUpdates ();
        // -----
        DataModule1 -> PeopleUpFDQuery -> Close ();
        // -------------
        Panel9 -> Visible = false;
        Edit1 -> Text = ""; // очищение № группы
        ComboBox6 -> ItemIndex = -1; // вид обучения
        // -------------
        Panel10 -> Visible = false;
        DBLookupComboBox7 -> KeyValue = -1; // ФИО
        DBLookupComboBox8 -> KeyValue = -1; // Причина
        Edit14 -> Text = ""; // очищение № приказа
        Edit15 -> Text = ""; // очищение № группы
        DateTimePicker6 -> Date = Now (); // очищение даты приказа
        DateTimePicker6 -> Time = StrToTime ("00:00");
        DateTimePicker7 -> Date = Now ();
        // очищение даты продления а/о  с:
        DateTimePicker7 -> Time = StrToTime ("00:00");
        DateTimePicker8 -> Date = Now ();
        // очищение даты а/о продления по:
        DateTimePicker8 -> Time = StrToTime ("00:00");
        RadioGroup2 -> ItemIndex = -1;
        // выключение  RadioGroup2
        // -----

    } // end try
    catch (...) { // catch
        ShowMessage (
            "Допущена ошибка, проверьте все данные и попробуйте еще раз!");
        DataModule1 -> HolidayFDQuery -> CancelUpdates ();
    } // end catch

}

void __fastcall TDeloForm::RadioGroup3Click (TObject * Sender)
{ // Закладка  поощрения/взыскания
    // Щелчек на группе Тип поощрения или взыскания
    /* AnsiString sql_encourage="SELECT Encourage.NOMER, Encourage.N_TYPE_EN, Encourage.WHAT, \
     Encourage.WHO_TAKE, Encourage.N_PRIKAZ, Encourage.D_PRIKAZ, Type_encourage.VID_EN, \
     Type_encourage.TYPE_EN FROM ENCOURAGE Encourage INNER JOIN TYPE_ENCOURAGE Type_encourage \
     ON  (Encourage.N_TYPE_EN = Type_encourage.N_TYPE_EN)  "; */

    // Query  Для выбора в DBLookupComboBox10 Вид либо поощрения, либо взыскания
    DataModule1 -> Type_EncourageFDQuery -> Close ();
    DataModule1 -> Type_EncourageFDQuery -> ParamByName ("TYP") -> AsSmallInt =
        RadioGroup3 -> ItemIndex;
    DataModule1 -> Type_EncourageFDQuery -> Open ();
    if (RadioGroup3 -> ItemIndex)
        Label64 -> Caption = "Вид взыскания";
    else
        Label64 -> Caption = "Вид поощрения";
    ComboBox12 -> Items -> Clear ();
    if (RadioGroup3 -> ItemIndex) { // if взыскания
        ComboBox12 -> Items -> Add ("За систематические пропуски учебных занятий");
        ComboBox12 -> Items -> Add ("За нарушение правил проживания в общежитии");
        ComboBox12 -> Items -> Add ("За невыполнение указаний декана");
        ComboBox12 -> Items -> Add ("За нарушение правил внутреннего распорядка");
    } // end if  взыскания
    else { // else  поощрения
        ComboBox12 -> Items -> Add
            ("За отличную учебу, активное участие в общественной и спортивной жизни университета"
            );
        ComboBox12 -> Items -> Add
            ("За хорошую учебу, активное участие в общественной и спортивной жизни университета"
            );
    } // end else поощрения
    ComboBox13 -> Items -> Clear ();
    ComboBox13 -> Items -> Add ("Ректор");
    ComboBox13 -> Items -> Add ("Декан");
    DBLookupComboBox10 -> Visible = true;
}

void __fastcall TDeloForm::BitBtn14Click (TObject * Sender)
{ // Закладка Поощрения/Взыскания, действие по кнопке -- Выбрать студента

    i_gr = search_increment_group (Edit16 -> Text, ComboBox7 -> ItemIndex);
    if (!i_gr.IsNull ()) {
        // sql_old="SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND FROM PEOPLE People";

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE People WHERE (N_FAC=" +
            AnsiString (nom_fac) +
            ") AND (STATUS_PEOPLE=1) AND (INC_GROUP=:I_GR) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("I_GR") -> AsInteger = i_gr;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        if (DataModule1 -> PeopleUpFDQuery -> RecordCount) {
            Panel11 -> Visible = true;
            DataModule1 -> EncourageFDQuery -> Open ();
            // DataModule1 -> EncourageFDQuery -> Insert ();
        }
        else {
            ShowMessage ("Вероятно вы выбрали группу не вашего факультета!");
            Edit16 -> SetFocus ();
        }

    }
    else {
        ShowMessage ("Не найден номер группы!");
        Edit16 -> SetFocus ();
    }

}

void __fastcall TDeloForm::BitBtn15Click (TObject * Sender)
{ // Закладка Поощрения/Взыскания, действия по кнопке -- Сохранить
    try { // try
        if (DataModule1 -> EncourageFDQuery -> State != dsInsert)
            DataModule1 -> EncourageFDQuery -> Insert ();

        // поле номер студента из DBLookupComboBox9
        DataModule1 -> EncourageFDQueryNOMER -> Value = DBLookupComboBox9 -> KeyValue;
        // поле номер поощрения или взыскания
        DataModule1 -> EncourageFDQueryN_TYPE_EN -> Value =
            DBLookupComboBox10 -> KeyValue;
        // поле номер и дата приказа, Кто выносит, за что из БД-компонентов

        // N_PRIKAZ, D_PRIKAZ,  WHO_TAKE, WHAT
        try {
            DataModule1 -> EncourageFDQueryN_PRIKAZ -> Value =
                StrToInt (Edit33 -> Text);
        }
        catch (...) {
            DataModule1 -> EncourageFDQuery -> Cancel ();
            ShowMessage (
                "Неправильно введен номер приказа. Попробуйте еще раз!");
            return;
        }
        DataModule1 -> EncourageFDQueryD_PRIKAZ -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker18 -> Date);
        // WHO_TAKE-кто выносит
        DataModule1 -> EncourageFDQueryWHO_TAKE -> Value = ComboBox13 -> Text;

        // WHAT - за что
        if (correct) {
            DataModule1 -> EncourageFDQueryWHAT -> Value = Edit37 -> Text;
        }
        else {
            DataModule1 -> EncourageFDQueryWHAT -> Value = ComboBox12 -> Text;
        }

        DataModule1 -> EncourageFDQuery -> ApplyUpdates ();
        DataModule1 -> EncourageFDQuery -> CommitUpdates ();
        // ----
        ComboBox7 -> ItemIndex = -1; // вид обучения
        Edit16 -> Text = ""; // № группы на панели
        // ----
        Panel11 -> Visible = false;

        RadioGroup3 -> ItemIndex = -1;
        // выбор типа поощрение или взыскание
        DBLookupComboBox10 -> Visible = false;
        // конкретный вид поощрение или взыскание
        Label64 -> Caption = "";
        // Label для   конкретный вид поощрение или взыскание
        DBLookupComboBox10 -> KeyValue = -1;
        // очищение поощрений или взысканий
        DBLookupComboBox9 -> KeyValue = -1; // ФИО
        ComboBox12 -> Items -> Clear (); // за что
        ComboBox13 -> Items -> Clear (); // кто выносит
        DateTimePicker18 -> Date = Now (); // дата приказа
        Edit33 -> Text = ""; // номер приказа
        // -----
        DataModule1 -> EncourageFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> Close ();
        // ----
    } // end try
    catch (...) { // catch
        ShowMessage (
            "Допущена ошибка, проверьте все данные и попробуйте еще раз!");
        DataModule1 -> EncourageFDQuery -> CancelUpdates ();
    } // end catch
}

void __fastcall TDeloForm::BitBtn16Click (TObject * Sender)
{ // //Закладка Поощрения/Взыскания, действия по кнопке -- Отменить
    if (DataModule1 -> EncourageFDQuery -> State == dsInsert)
        DataModule1 -> EncourageFDQuery -> CancelUpdates ();
    // ----
    // ----
    ComboBox7 -> ItemIndex = -1; // вид обучения
    Edit16 -> Text = ""; // № группы на панели
    // ----
    Panel11 -> Visible = false;

    RadioGroup3 -> ItemIndex = -1; // выбор типа поощрение или взыскание
    DBLookupComboBox10 -> Visible = false;
    // конкретный вид поощрение или взыскание
    Label64 -> Caption = "";
    // Label для   конкретный вид поощрение или взыскание
    DBLookupComboBox10 -> KeyValue = -1;
    // очищение поощрений или взысканий
    DBLookupComboBox9 -> KeyValue = -1; // ФИО
    ComboBox12 -> Items -> Clear (); // за что
    ComboBox13 -> Items -> Clear (); // кто выносит
    DateTimePicker18 -> Date = Now (); // дата приказа
    DateTimePicker18 -> Time = StrToTime ("00:00");
    Edit33 -> Text = "";
    // номер приказа
    // -----
    DataModule1 -> EncourageFDQuery -> Close ();
    DataModule1 -> PeopleUpFDQuery -> Close ();

    /* Panel11 -> Visible=false;
     RadioGroup3 -> ItemIndex=-1;
     Label64 -> Caption="";
     DBLookupComboBox10 -> Visible=false;
     // ComboBox7 -> ItemIndex=-1;//вид обучения
     //  Edit16 -> Text="";//  № группы на панели */
    // ----
}

void __fastcall TDeloForm::RadioGroup4Click (TObject * Sender) {
    // Закладка ПЕРЕВОД, выбор категории перевода
    // ------
    Panel12 -> Visible = false; // панель выбор студента
    Panel12 -> Height = 61; // возвращаем панель к первоначальным размерам
    ComboBox8 -> ItemIndex = -1; // вид обучения  на панели   Panel12
    Edit17 -> Text = ""; // № группы на панели   Panel12
    // -----
    Panel13 -> Visible = false; // панель перевода
    DBLookupComboBox11 -> KeyValue = -1; // специализация
    DBLookupComboBox12 -> KeyValue = -1; // ФИО
    RadioGroup6 -> ItemIndex = -1; // основание обучения
    RadioGroup7 -> ItemIndex = -1; // вид обучения  на панели   Panel13
    Edit18 -> Text = ""; // № группы на панели   Panel13
    Edit19 -> Text = ""; // курс
    Edit32 -> Text = ""; // № приказа
    DateTimePicker17 -> Date = Now (); // Дата приказа
    DateTimePicker17 -> Time = StrToTime ("00:00");
    // ------
    RadioGroup5 -> Visible = true;
    RadioGroup5 -> ItemIndex = -1;
    RadioGroup5 -> Items -> Clear ();
    if (RadioGroup4 -> ItemIndex) { // if Перевод в пределах факультета

        RadioGroup5 -> Items -> Add ("Другой вид обучения или условие обучения");
        RadioGroup5 -> Items -> Add
            ("Другое направление специальности (специализации)");

    } // end if Перевод в пределах факультета
    else { // else Перевод между факультетами

        RadioGroup5 -> Items -> Add ("Перевод на другой факультет");
        RadioGroup5 -> Items -> Add ("Перевод с другого факультета");

    } // end else Перевод между факультетами
    if ( (RadioGroup4 -> ItemIndex == 1) & (RadioGroup5 -> ItemIndex == 1)) {
        RadioGroup18 -> Visible = True;
        RadioGroup18 -> ItemIndex = 0;
    }
    else {
        RadioGroup18 -> Visible = False;
        RadioGroup18 -> ItemIndex = 0;
    }
}

void __fastcall TDeloForm::RadioGroup5Click (TObject * Sender) {
    Edit17 -> Text = "";
    RadioGroup6 -> Visible = True;
    RadioGroup7 -> Visible = True;
    Label72 -> Visible = True;
    Label73 -> Visible = True;
    Edit19 -> Visible = True;
    DBLookupComboBox12 -> Visible = True;
    ListBox5 -> Visible = False;
    // Закладка Перевод, Выбор вида перевода
    if (RadioGroup4 -> ItemIndex) // =1
    { // if Перевод в пределах факультета
        Panel12 -> Visible = true; // панель выбора студента
    } // end if Перевод в пределах факультета
    else // =0
    { // else Перевод между факультетами
        if (RadioGroup5 -> ItemIndex) // =1
        { // if С другого факультета
            Panel13 -> Visible = true; // панель перевода
            Panel12 -> Visible = false; // панель выбора студента
            DataModule1 -> PeopleUpFDQuery -> Close ();
            DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
            DataModule1 -> PeopleUpFDQuery -> SQL -> Add
                ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE People WHERE (STATUS_PEOPLE=4) ORDER BY FAM"
                );
            // STATUS_PEOPLE=4 для перевода и без учета номера факультета
            DataModule1 -> PeopleUpFDQuery -> Open ();
            DataModule1 -> Public_PrikazFDQuery -> Open ();
            // DataModule1 -> Public_PrikazQuery -> Insert ();
        } // end if  С другого факультета
        else // =0
        { // else  На другой факультет
            Panel12 -> Visible = true; // панель выбора студента
            Panel13 -> Visible = false; // панель перевода
        } // end else На другой факультет
    } // end else  Перевод между факультетами
    if ( (RadioGroup4 -> ItemIndex == 1) & (RadioGroup5 -> ItemIndex == 1)) {
        RadioGroup18 -> Visible = True;
        RadioGroup18 -> ItemIndex = 0;
    }
    else {
        RadioGroup18 -> Visible = False;
        RadioGroup18 -> ItemIndex = 0;
    }
}

void __fastcall TDeloForm::BitBtn17Click (TObject * Sender) {
    RadioGroup6 -> Visible = True;
    RadioGroup7 -> Visible = True;
    Label72 -> Visible = True;
    Label73 -> Visible = True;
    Edit19 -> Visible = True;
    DBLookupComboBox12 -> Visible = True;
    ListBox5 -> Visible = False;
    // Закладка Перевод, действие по кнопке выбрать студента
    if (ComboBox8 -> Text == "" || Edit17 -> Text == "")
    { // if проверка на ввод всех данных
        ShowMessage ("Введите все данные!");
        return;
    } // end if проверка на ввод всех данных

    i_gr = search_increment_group (Edit17 -> Text, ComboBox8 -> ItemIndex);
    if (!i_gr.IsNull ()) { // if проверка на IsNull ()
        // sql_old="SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND FROM PEOPLE People";

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, D_INCLUDE, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, DATE_END  FROM PEOPLE People WHERE (N_FAC=" +
            AnsiString (nom_fac) +
            ") AND (STATUS_PEOPLE=1) AND (INC_GROUP=:I_GR) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("I_GR") -> AsInteger = i_gr;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        if (DataModule1 -> PeopleUpFDQuery -> RecordCount)
        { // if проверка на   RecordCount

            if (RadioGroup4 -> ItemIndex == 0 && RadioGroup5 -> ItemIndex == 0)
            { // if если перевод на другой факультет
                Panel12 -> Height = 134;
                // увеличиваем панель выбора студента
            } // end if если перевод на другой факультет
            else { // else если перевод другого вида
                Panel12 -> Height = 61;
                // возвращаем панель к первоначальным размерам
                Panel13 -> Visible = true; // панель перевода
                DataModule1 -> Public_PrikazFDQuery -> Open ();
                DataModule1 -> Public_PrikazFDQuery -> Insert ();
            } // end else если перевод другого вида
        } // end if проверка на   RecordCount
        else { // else проверка на   RecordCount
            ShowMessage ("Нет ни одного студента по заданному условию!");
            Edit17 -> SetFocus ();
        } // end else проверка на   RecordCount

    } // end if  проверка на IsNull ()
    else { // else проверка на IsNull ()
        ShowMessage ("Не найден номер группы!");
        Edit17 -> SetFocus ();
    } // end else   проверка на IsNull ()

}

void __fastcall TDeloForm::BitBtn20Click (TObject * Sender)
{ // Закладка Перевод, действие по кнопке Сохранить
    // при переводе на другой факультет

    if (DBLookupComboBox13 -> Text != "") { // if проверка на ввод данных

        DataModule1 -> PeopleUpFDQuery -> Edit ();
        try { // try
            // сохранение для перевода на другой факультет
            DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 4;
            // статус переводившихся
            DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = 18;
            // инкремент группы 000
            DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
            DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();

            // ------
            Panel12 -> Visible = false; // панель выбор студента
            ComboBox8 -> ItemIndex = -1;
            // вид обучения  на панели   Panel12
            Edit17 -> Text = ""; // № группы на панели   Panel12

            // ------
            RadioGroup4 -> ItemIndex = -1; // выбор категории перевода
            RadioGroup5 -> ItemIndex = -1; // выбор вида перевода
        } // end try
        catch (...) { // catch
            ShowMessage ("Произошел сбой при сохранении, попробуйте еще раз!");
        } // end catch
    } // end if проверка на ввод данных
    else { // else проверка на ввод данных
        ShowMessage ("Выберите фамилию студента!");
    } // end else проверка на ввод данных
}

void __fastcall TDeloForm::BitBtn18Click (TObject * Sender) {
    int n;
    if (RadioGroup18 -> ItemIndex == 1) {
        n = ListBox5 -> Items -> Count;
        for (int i = 0; i < n; i++) {
            // Закладка Перевод, действие по кнопке сохранить
            try { // try
                AnsiString describe = "";
                // ------сохранение изменений в  PeopleUpQuery
                if (Edit18 -> Text == "") { // if  проверка на № группы и курс
                    ShowMessage ("Введите номер курса!");
                    return;
                } // end if  проверка на № группы и курс

                if (Edit32 -> Text == "") { // if  проверка на № и дату приказа
                    ShowMessage ("Введите номер или дату приказа!");
                    return;
                } // end if  проверка на № и дату приказа

                if (DBLookupComboBox11 -> Text == "")
                { // if  проверка на выбор специализации
                    ShowMessage ("Выберите специализацию студента!");
                    return;
                } // end if  проверка на выбор специализации

                if (!check_fac_group (Edit18 -> Text))
                    return; // проверка на номер группы и факультет
                if (!check_group_kurs (Edit18 -> Text, Edit17 -> Text))
                    return; // проверка на номер группы и курс

                i_gr = search_increment_group (Edit18 -> Text,
                    ComboBox8 -> ItemIndex);
                int nomer = (int) (ListBox5 -> Items -> Objects[i]);
                int c_k = 0;
                // переменная для определения какое действие было выбрано пользователем

                if (!RadioGroup4 -> ItemIndex)
                    c_k = 4; // означает перевод на другой факультет
                if (RadioGroup4 -> ItemIndex && !RadioGroup5 -> ItemIndex)
                    c_k = 3; // означает перевод на другой вид обучения
                if (RadioGroup4 -> ItemIndex && RadioGroup5 -> ItemIndex)
                    c_k = 0; // означает перевод на другую специализацию

                if (c_k) {
                    if (!DataModule1 -> Search_CK (nomer, 2, Edit32 -> Text,
                        DateTimePicker17 -> Date.DateString ()))
                    { // if по процедуре вернулся 0 - что означает отменить действие
                        ShowMessage (
                            "Перевод приостановлен из-за проблем с целевым контрактом!");
                        return;
                    }
                }

                if (!i_gr.IsNull ())
                { // if проверка на нахождение инкремента группы

                    // ----Изменение параметров по студенту
                    DataModule1 -> PeopleUpFDQuery -> Close ();
                    DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
                    DataModule1 -> PeopleUpFDQuery -> SQL -> Add
                        ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE People WHERE (N_FAC=" +
                        AnsiString (nom_fac) +
                        ") AND (STATUS_PEOPLE=1) AND (KURS=:KURS) AND (NOMER=:NOMER) ORDER BY FAM, NAME, OTCH");
                    DataModule1 -> PeopleUpFDQuery -> ParamByName ("KURS")
                        -> AsInteger = Variant (Edit17 -> Text);
                    DataModule1 -> PeopleUpFDQuery -> ParamByName ("NOMER")
                        -> AsInteger = nomer;
                    DataModule1 -> PeopleUpFDQuery -> Open ();
                    // ----Изменение параметров по студенту

                    describe += " с ";
                    describe += DM2 -> SpecializFDTable -> Lookup ("N_SPECIALIZ",
                        DataModule1 -> PeopleUpFDQueryN_SPECIALIZ -> Value,
                        "SPECIAL");
                    describe += " на ";
                    describe += DBLookupComboBox11 -> Text;

                    DataModule1 -> PeopleUpFDQuery -> Edit ();
                    // проверка на условно переведенный статус студента

                    if (DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value == 1)
                    { // if  STATUS_KURS =1
                        DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 0;
                    } // end if  STATUS_KURS =1

                    // номер и инкремент группы
                    DataModule1 -> PeopleUpFDQueryN_GROUP -> Value = Edit18 -> Text;
                    DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = i_gr;
                    // специализация студента
                    DataModule1 -> PeopleUpFDQueryN_SPECIALIZ -> Value =
                        DBLookupComboBox11 -> KeyValue;

                    // Специализация изменится автоматически из  DBLookupComboBox11

                    // специальность студента, изменяется, если изменяется специализация
                    DataModule1 -> PeopleUpFDQueryN_SPEC -> Value =
                        DM2 -> SpecializFDTable -> Lookup ("N_SPECIALIZ",
                        DBLookupComboBox11 -> KeyValue, "N_SPEC");

                    // ----
                }

                else { // else  проверка на нахождение инкремента группы
                    ShowMessage ("Неправильно введен номер группы!");
                    return;
                }
                // end else проверка на нахождение инкремента группы

                // ------занесение записи в  Public_PrikazQuery
                if (DataModule1 -> Public_PrikazFDQuery -> State == dsInactive)
                    DataModule1 -> Public_PrikazFDQuery -> Open ();
                if (DataModule1 -> Public_PrikazFDQuery -> State != dsInsert)
                    DataModule1 -> Public_PrikazFDQuery -> Insert ();
                // занесение N_PUBLIC_PRIKAZ  номера приказа
                try { // try проверка на номер приказа в числовой форме
                    DataModule1 -> Public_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
                        StrToInt (Edit32 -> Text);
                } // end try проверка на номер приказа в числовой форме
                catch (...) { // catch выход из цикла
                    DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
                    DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
                    ShowMessage ("№ приказа должен быть в числовой форме!");
                    return;
                } // end catch
                // D_PUBLIC_PRIKAZ   даты приказа
                DataModule1 -> Public_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
                    DateTimeToSQLTimeStamp (DateTimePicker17 -> Date);
                DataModule1 -> Public_PrikazFDQueryNOMER -> Value = nomer;
                DataModule1 -> Public_PrikazFDQueryDESCRIBE -> Value = describe;
                DataModule1 -> Public_PrikazFDQueryN_TYPE -> Value =
                    DM2 -> Type_PrikazFDTable -> Lookup ("TYPE_PRIKAZ", "Перевод",
                    "N_TYPE");
                // ----------

                DataModule1 -> Public_PrikazFDQuery -> ApplyUpdates ();
                DataModule1 -> Public_PrikazFDQuery -> CommitUpdates ();
                DataModule1 -> Public_PrikazFDQuery -> Close ();

                DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
                DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
                DataModule1 -> PeopleUpFDQuery -> Close ();

            } // end try
            catch (...) { // catch

                ShowMessage (
                    "Произошел сбой при сохранении, попробуйте еще раз!");
                DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();

                DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
            } // end catch

        }
        // ------
        Panel12 -> Visible = false; // панель выбор студента
        ComboBox8 -> ItemIndex = -1; // вид обучения  на панели   Panel12
        Edit17 -> Text = ""; // № группы на панели   Panel12
        // -----
        Panel13 -> Visible = false; // панель перевода
        DBLookupComboBox11 -> KeyValue = -1; // специализация
        DBLookupComboBox12 -> KeyValue = -1; // ФИО

        RadioGroup6 -> ItemIndex = -1; // основание обучения
        RadioGroup7 -> ItemIndex = -1;
        // вид обучения  на панели   Panel13
        Edit18 -> Text = ""; // № группы на панели   Panel13
        Edit19 -> Text = ""; // курс
        Edit32 -> Text = ""; // № приказа
        DateTimePicker17 -> Date = Now (); // Дата приказа
        DateTimePicker17 -> Time = StrToTime ("00:00");
        // ------
        RadioGroup4 -> ItemIndex = -1; // выбор категории перевода
        RadioGroup5 -> ItemIndex = -1; // выбор вида перевода
        RadioGroup5 -> Visible = false;
        RadioGroup18 -> Visible = false;
        // ------
    }
    else
        // Закладка Перевод, действие по кнопке сохранить
        try { // try
        AnsiString describe = "";
        // ------сохранение изменений в  PeopleUpQuery
        if (Edit18 -> Text == "" || Edit19 -> Text == "")
        { // if  проверка на № группы и курс
            ShowMessage ("Введите номер группы и номер курса!");
            return;
        } // end if  проверка на № группы и курс

        if (Edit32 -> Text == "") { // if  проверка на № и дату приказа
            ShowMessage ("Введите номер или дату приказа!");
            return;
        } // end if  проверка на № и дату приказа

        if (DBLookupComboBox11 -> Text == "")
        { // if  проверка на выбор специализации
            ShowMessage ("Выберите специализацию студента!");
            return;
        } // end if  проверка на выбор специализации

        if (DBLookupComboBox12 -> Text == "") { // if  проверка на выбор ФИО
            ShowMessage ("Выберите фамилию студента!");
            return;
        } // end if  проверка на выбор ФИО

        if (RadioGroup6 -> ItemIndex == -1 || RadioGroup7 -> ItemIndex == -1)
        { // if  проверка на вид обучения и основание учебы (бюджет или договор)
            ShowMessage ("Введите вид обучения или основание обучения!");
            return;
        }
        // end if проверка на вид обучения и основание учебы (бюджет или договор)

        if (!check_fac_group (Edit18 -> Text))
            return; // проверка на номер группы и факультет
        if (!check_group_kurs (Edit18 -> Text, Edit19 -> Text))
            return; // проверка на номер группы и курс

        i_gr = search_increment_group (Edit18 -> Text, RadioGroup7 -> ItemIndex);

        int c_k = 0;
        // переменная для определения какое действие было выбрано пользователем

        if (!RadioGroup4 -> ItemIndex)
            c_k = 4; // означает перевод на другой факультет
        if (RadioGroup4 -> ItemIndex && !RadioGroup5 -> ItemIndex)
            c_k = 3; // означает перевод на другой вид обучения
        if (RadioGroup4 -> ItemIndex && RadioGroup5 -> ItemIndex)
            c_k = 0; // означает перевод на другую специализацию

        if (c_k) {
            if (!DataModule1 -> Search_CK (DBLookupComboBox12 -> KeyValue, c_k,
                Edit32 -> Text, DateTimePicker17 -> Date.DateString ()))
            { // if по процедуре вернулся 0 - что означает отменить действие
                ShowMessage (
                    "Перевод приостановлен из-за проблем с целевым контрактом!");
                return;
            }
        }

        if (!i_gr.IsNull ()) { // if проверка на нахождение инкремента группы
            if (RadioGroup4 -> ItemIndex == 0 && RadioGroup5 -> ItemIndex == 1)
            { // if перевод на другой факультет

                if (DataModule1 -> PeopleUpFDQueryVID_EDU -> Value)
                { // if заочное обучение
                    describe = "с заочного "; // заочное
                } // end if заочное обучение
                else { // else дневное обучение
                    describe = "с дневного ";
                } // end else дневное обучение

                describe += DM2 -> FacultyFDTable -> Lookup ("N_FAC",
                    DataModule1 -> PeopleUpFDQueryN_FAC -> Value, "FAC1");
                describe += " на ";
                // формирование строки по виду обучения и факультету
                describe += RadioGroup7 -> Items -> Strings[RadioGroup7 -> ItemIndex]
                    + " " + DM2 -> FacultyFDTable -> Lookup ("N_FAC", nom_fac,
                    "FAC1");
                // основанию обучения - бюджет, договор
                describe += " с " + DM2 -> FoundationFDTable -> Lookup ("N_FOUND",
                    DataModule1 -> PeopleUpFDQueryN_FOUND -> Value, "VID_FOUND") +
                    " на " + RadioGroup6 -> Items -> Strings
                    [RadioGroup7 -> ItemIndex];

            } // end if перевод на другой факультет
            else { // else для остальных случаев
                if (DataModule1 -> PeopleUpFDQueryVID_EDU -> Value)
                    describe = "с заочного на "; // заочное
                else
                    describe = "с дневного на "; // дневное
                // формирование строки по виду обучения + основанию обучения - бюджет, договор
                describe += RadioGroup7 -> Items -> Strings[RadioGroup7 -> ItemIndex]
                    + " с " + DM2 -> FoundationFDTable -> Lookup ("N_FOUND",
                    DataModule1 -> PeopleUpFDQueryN_FOUND -> Value, "VID_FOUND") +
                    " на " + RadioGroup6 -> Items -> Strings
                    [RadioGroup6 -> ItemIndex];

            } // end else для остальных случаев

            if (RadioGroup4 -> ItemIndex == 1 && RadioGroup5 -> ItemIndex == 1)
            { // if перевод на другую специализацию в пределах факультета
                describe += " с ";
                describe += DM2 -> SpecializFDTable -> Lookup ("N_SPECIALIZ",
                    DataModule1 -> PeopleUpFDQueryN_SPECIALIZ -> Value, "SPECIAL");
                describe += " на ";
                describe += DBLookupComboBox11 -> Text;
            } // end if перевод на другую специализацию в пределах факультета
            // ----Изменение параметров по студенту
            DataModule1 -> PeopleUpFDQuery -> Edit ();
            // проверка на условно переведенный статус студента
            if (DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value == 1)
            { // if  STATUS_KURS =1
                DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 0;
            } // end if  STATUS_KURS =1

            // факультет
            DataModule1 -> PeopleUpFDQueryN_FAC -> Value = nom_fac;
            // вид обучения
            DataModule1 -> PeopleUpFDQueryVID_EDU -> Value = RadioGroup7 -> ItemIndex;
            // номер и инкремент группы
            DataModule1 -> PeopleUpFDQueryN_GROUP -> Value = Edit18 -> Text;
            DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = i_gr;
            // курс
            DataModule1 -> PeopleUpFDQueryKURS -> Value = StrToInt (Edit19 -> Text);
            // основание обучения -- бюджет или договор
            DataModule1 -> PeopleUpFDQueryN_FOUND -> Value =
                DM2 -> FoundationFDTable -> Lookup ("VID_FOUND",
                RadioGroup6 -> Items -> Strings[RadioGroup6 -> ItemIndex], "N_FOUND");
            // статус действующего студента
            DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 1;
            // специализация студента
            DataModule1 -> PeopleUpFDQueryN_SPECIALIZ -> Value =
                DBLookupComboBox11 -> KeyValue;

            // Специализация изменится автоматически из  DBLookupComboBox11

            // специальность студента, изменяется, если изменяется специализация
            DataModule1 -> PeopleUpFDQueryN_SPEC -> Value =
                DM2 -> SpecializFDTable -> Lookup ("N_SPECIALIZ",
                DBLookupComboBox11 -> KeyValue, "N_SPEC");

            // ----
        } // end if проверка на нахождение инкремента группы
        else { // else  проверка на нахождение инкремента группы
            ShowMessage ("Неправильно введен номер группы!");
            return;
        } // end else проверка на нахождение инкремента группы
        // ------занесение записи в  Public_PrikazQuery
        if (DataModule1 -> Public_PrikazFDQuery -> State == dsInactive)
            DataModule1 -> Public_PrikazFDQuery -> Open ();
        if (DataModule1 -> Public_PrikazFDQuery -> State != dsInsert)
            DataModule1 -> Public_PrikazFDQuery -> Insert ();
        // занесение N_PUBLIC_PRIKAZ  номера приказа
        try { // try проверка на номер приказа в числовой форме
            DataModule1 -> Public_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
                StrToInt (Edit32 -> Text);
        } // end try проверка на номер приказа в числовой форме
        catch (...) { // catch выход из цикла
            DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
            DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
            ShowMessage ("№ приказа должен быть в числовой форме!");
            return;
        } // end catch
        // D_PUBLIC_PRIKAZ   даты приказа
        DataModule1 -> Public_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker17 -> Date);
        DataModule1 -> Public_PrikazFDQueryNOMER -> Value =
            DBLookupComboBox12 -> KeyValue;
        DataModule1 -> Public_PrikazFDQueryDESCRIBE -> Value = describe;
        DataModule1 -> Public_PrikazFDQueryN_TYPE -> Value =
            DM2 -> Type_PrikazFDTable -> Lookup ("TYPE_PRIKAZ", "Перевод", "N_TYPE");
        // ----------

        DataModule1 -> Public_PrikazFDQuery -> ApplyUpdates ();
        DataModule1 -> Public_PrikazFDQuery -> CommitUpdates ();
        DataModule1 -> Public_PrikazFDQuery -> Close ();

        DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
        DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
        DataModule1 -> PeopleUpFDQuery -> Close ();

        // ------
        Panel12 -> Visible = false; // панель выбор студента
        ComboBox8 -> ItemIndex = -1; // вид обучения  на панели   Panel12
        Edit17 -> Text = ""; // № группы на панели   Panel12
        // -----
        Panel13 -> Visible = false; // панель перевода
        DBLookupComboBox11 -> KeyValue = -1; // специализация
        DBLookupComboBox12 -> KeyValue = -1; // ФИО

        RadioGroup6 -> ItemIndex = -1; // основание обучения
        RadioGroup7 -> ItemIndex = -1;
        // вид обучения  на панели   Panel13
        Edit18 -> Text = ""; // № группы на панели   Panel13
        Edit19 -> Text = ""; // курс
        Edit32 -> Text = ""; // № приказа
        DateTimePicker17 -> Date = Now (); // Дата приказа
        DateTimePicker17 -> Time = StrToTime ("00:00");
        // ------
        RadioGroup4 -> ItemIndex = -1; // выбор категории перевода
        RadioGroup5 -> ItemIndex = -1; // выбор вида перевода
        RadioGroup5 -> Visible = false;
        // ------
        } // end try
    catch (...) { // catch

        ShowMessage ("Произошел сбой при сохранении, попробуйте еще раз!");
        DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();

        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
    } // end catch
}

void __fastcall TDeloForm::BitBtn19Click (TObject * Sender)
{ // Закладка Перевод, действие по кнопке Отменить
    DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
    DataModule1 -> Public_PrikazFDQuery -> Close ();
    DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
    DataModule1 -> PeopleUpFDQuery -> Close ();
    // ------
    Panel12 -> Visible = false; // панель выбор студента
    ComboBox8 -> ItemIndex = -1; // вид обучения  на панели   Panel12
    Edit17 -> Text = ""; // № группы на панели   Panel12
    // -----
    Panel13 -> Visible = false; // панель перевода

    DBLookupComboBox11 -> KeyValue = -1; // специализация
    DBLookupComboBox12 -> KeyValue = -1; // ФИО

    RadioGroup6 -> ItemIndex = -1; // основание обучения
    RadioGroup7 -> ItemIndex = -1; // вид обучения  на панели   Panel13
    Edit18 -> Text = ""; // № группы на панели   Panel13
    Edit19 -> Text = ""; // курс
    Edit32 -> Text = ""; // № приказа
    DateTimePicker17 -> Date = Now (); // Дата приказа
    DateTimePicker17 -> Time = StrToTime ("00:00");

    // ------
    RadioGroup4 -> ItemIndex = -1; // выбор категории перевода
    RadioGroup5 -> ItemIndex = -1; // выбор вида перевода
    RadioGroup5 -> Visible = false;
    RadioGroup18 -> Visible = false;
}

void __fastcall TDeloForm::ComboBox8Change (TObject * Sender)
{ // изменение по виду обучения или номеру группы

    Panel13 -> Visible = false; // панель перевода
    RadioGroup6 -> ItemIndex = -1; // основание обучения
    RadioGroup7 -> ItemIndex = -1; // вид обучения  на панели   Panel13
    Edit18 -> Text = ""; // № группы на панели   Panel13
    Edit19 -> Text = ""; // курс
    if (DataModule1 -> PeopleUpFDQuery -> State == dsEdit)
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
    if (DataModule1 -> Public_PrikazFDQuery -> State == dsInsert)
        DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
}

void __fastcall TDeloForm::ComboBox9Change (TObject * Sender)
{ // изменение по виду обучения или номеру группы
    // -----
    Panel14 -> Visible = false;
    Edit21 -> Text = ""; // № группы
    Edit22 -> Text = ""; // курс
    // -------
    if (DataModule1 -> Public_PrikazFDQuery -> State == dsInsert)
        DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
}

void __fastcall TDeloForm::BitBtn23Click (TObject * Sender)
{ // Закладка Повторный год обучения, действие по кнопке Отменить
    DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
    DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
    DataModule1 -> Public_PrikazFDQuery -> Close ();
    DataModule1 -> PeopleUpFDQuery -> Close ();

    // -----
    Panel14 -> Visible = false;
    DBLookupComboBox14 -> KeyValue = -1; // ФИО
    Edit21 -> Text = ""; // № группы
    Edit22 -> Text = ""; // курс
    Edit30 -> Text = ""; // № приказа
    DateTimePicker15 -> Date = Now (); // дата приказа
    DateTimePicker15 -> Time = StrToTime ("00:00");
    // -------
    Panel15 -> Visible = false;
    Edit20 -> Text = ""; // № группы
    ComboBox9 -> ItemIndex = -1; // вид обучения
    // -------------
    RadioGroup8 -> ItemIndex = -1;
}

void __fastcall TDeloForm::BitBtn21Click (TObject * Sender)
{ // Закладка Повторный год обучения, действие по кнопке -- Выбрать студента

    i_gr = search_increment_group (Edit20 -> Text, ComboBox9 -> ItemIndex);
    if (!i_gr.IsNull ()) {
        // sql_old="SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND FROM PEOPLE People";

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, D_INCLUDE, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, DATE_END FROM PEOPLE People WHERE (N_FAC=" +
            AnsiString (nom_fac) +
            ") AND (STATUS_PEOPLE=1) AND (INC_GROUP=:I_GR) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("I_GR") -> AsInteger = i_gr;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        if (!DataModule1 -> PeopleUpFDQuery -> RecordCount) {
            ShowMessage ("Не найден номер группы!");
            Edit20 -> SetFocus ();
        }
    }
    else {
        ShowMessage ("Не найден номер группы!");
        Edit20 -> SetFocus ();
    }
}

void __fastcall TDeloForm::BitBtn22Click (TObject * Sender)
{ // Закладка Повторный год обучения, действие по кнопке -- Сохранить
    try { // try
        if (Edit21 -> Text == "" || Edit22 -> Text == "")
        { // if проверка на ввод данных по номеру группы или курсу
            ShowMessage ("Введите номер группы или номер курса");
            return;
        } // end if

        if (!check_fac_group (Edit21 -> Text))
            return; // проверка на номер группы и факультет
        if (!check_group_kurs (Edit21 -> Text, Edit22 -> Text))
            return; // проверка на номер группы и курс
        i_gr = search_increment_group (Edit21 -> Text,
            DataModule1 -> PeopleUpFDQueryVID_EDU -> Value);
        if (i_gr.IsNull ()) { // if проверка на выбранный номер группы
            ShowMessage ("Неправильно выбран номер группы!");
            return;
        } // end if проверка на выбранный номер группы
        if (DBLookupComboBox14 -> KeyValue == -1) {
            ShowMessage ("Выберите ФИО студента!");
            return;
        }
        if (Edit30 -> Text == "") {
            ShowMessage ("Введите № приказа на повторный год обучения!");
            return;
        }
        // ------ вставка записи в Public_PrikazQuery
        if (DataModule1 -> Public_PrikazFDQuery -> State == dsInactive)
            DataModule1 -> Public_PrikazFDQuery -> Open ();
        if (DataModule1 -> Public_PrikazFDQuery -> State != dsInsert)
            DataModule1 -> Public_PrikazFDQuery -> Insert ();

        DataModule1 -> Public_PrikazFDQueryNOMER -> Value =
            DBLookupComboBox14 -> KeyValue; // номер студента
        // занесение N_PUBLIC_PRIKAZ и D_PUBLIC_PRIKAZ

        try { // проверка на ввод в № приказа числового значения
            DataModule1 -> Public_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
                StrToInt (Edit30 -> Text);
            // № приказа на повт. год обучения
        }
        catch (...) {
            DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
            ShowMessage ("Неверно введен № приказа!");
            return;
        }

        DataModule1 -> Public_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker15 -> Date);
        // дата приказа на восстановление
        if ( (DataModule1 -> PeopleUpFDQueryN_FOUND -> Value != 2) &&
            (RadioGroup11 -> ItemIndex == 1))
        { // if  студент был на бюджете но на повторный год остается на договор
            DataModule1 -> Public_PrikazFDQueryDESCRIBE -> Value =
                "Повторно на " + Edit22 -> Text + " курсе на договорных условиях";
        } // end if
        else { // else  другие варианты
            AnsiString text_dogovor = "";
            if (RadioGroup11 -> ItemIndex)
                text_dogovor = "  на договорных условиях";
            else
                text_dogovor = " за счет бюджетных средств";

            DataModule1 -> Public_PrikazFDQueryDESCRIBE -> Value =
                "Повторно на " + Edit22 -> Text + " курсе" + text_dogovor;
        } // end else
        DataModule1 -> Public_PrikazFDQueryN_TYPE -> Value =
            DM2 -> Type_PrikazFDTable -> Lookup ("TYPE_PRIKAZ",
            "Повторный год обучения", "N_TYPE");
        DataModule1 -> Public_PrikazFDQuery -> ApplyUpdates ();
        // ---- сохранение изменений в  PeopleUpQuery
        // if (DataModule1 -> PeopleUpQuery -> State==dsInactive) DataModule1 -> PeopleUpQuery -> Open ();
        DataModule1 -> PeopleUpFDQuery -> Edit ();
        // номер курса
        DataModule1 -> PeopleUpFDQueryKURS -> Value = StrToInt (Edit22 -> Text);
        // инкремент группы
        DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = i_gr;
        // номер группы
        DataModule1 -> PeopleUpFDQueryN_GROUP -> Value = Edit21 -> Text;
        // статус студенту изменяем
        DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 1;
        // условно переведенный студент должен стать обычным
        DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 0;
        // изменяем основание обучения только в случае если стоит договор
        if ( (DataModule1 -> PeopleUpFDQueryN_FOUND -> Value != 2) &&
            (RadioGroup11 -> ItemIndex == 1)) {
            DataModule1 -> PeopleUpFDQueryN_FOUND -> Value = 2;
        }
        DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();

        // -----------------
        // по положению надо при повторном годе обучения удалять все тройки у этого студента

        DataModule1 -> Result_Ball_ThreeFDQuery -> Close ();
        DataModule1 -> Result_Ball_ThreeFDQuery -> ParamByName ("S1") -> AsSmallInt =
            StrToInt (Edit22 -> Text) * 2;
        DataModule1 -> Result_Ball_ThreeFDQuery -> ParamByName ("S2") -> AsSmallInt =
            StrToInt (Edit22 -> Text) * 2 - 1;
        DataModule1 -> Result_Ball_ThreeFDQuery -> ParamByName ("FAC") -> AsSmallInt =
            nom_fac;
        DataModule1 -> Result_Ball_ThreeFDQuery -> ParamByName ("EDU") -> AsSmallInt =
            DataModule1 -> PeopleUpFDQueryVID_EDU -> Value;
        DataModule1 -> Result_Ball_ThreeFDQuery -> ParamByName ("NOMER") -> AsInteger =
            DataModule1 -> PeopleUpFDQueryNOMER -> Value;
        DataModule1 -> Result_Ball_ThreeFDQuery -> Open ();
        int col_three = DataModule1 -> Result_Ball_ThreeFDQuery -> RecordCount;
        // количество записей в выбранном Query
        for (int i = 0; i < col_three; i++)
        { // for если найдены тройки по предметам на повторном году обучения
            AnsiString box_delete = "";
            switch (DataModule1 -> Result_Ball_ThreeFDQueryRESULT -> Value)
            { // switch какая была оценка

            case 3:
                box_delete =
                    "У этого студента была оценка 3 (удовл.) по предмету " +
                    DataModule1 -> Result_Ball_ThreeFDQueryNAME_OBJECT -> Value +
                    " в " + DataModule1 -> Result_Ball_ThreeFDQuerySEMESTR -> Value
                    + " семестре. Удалить эту оценку?";
                break;
            case 14:
                box_delete =
                    "У этого студента была оценка 4 (четыре) по предмету " +
                    DataModule1 -> Result_Ball_ThreeFDQueryNAME_OBJECT -> Value +
                    " в " + DataModule1 -> Result_Ball_ThreeFDQuerySEMESTR -> Value
                    + " семестре. Удалить эту оценку?";
                break;
            case 15:
                box_delete =
                    "У этого студента была оценка 5 (пять) по предмету " +
                    DataModule1 -> Result_Ball_ThreeFDQueryNAME_OBJECT -> Value +
                    " в " + DataModule1 -> Result_Ball_ThreeFDQuerySEMESTR -> Value
                    + " семестре. Удалить эту оценку?";
                break;
            } // end switch какая была оценка

            // !!!if (Application -> MessageBox (box_delete.c_str (),"Внимание", MB_OKCANCEL) == IDOK)
            if (MessageDlg (box_delete.c_str (), mtWarning,
                TMsgDlgButtons () << mbOK << mbCancel, 0) == 1)
            { // if   удаление оценки из таблицы  Result_Ball
                DataModule1 -> Result_Ball_ThreeFDQuery -> Delete ();
                DataModule1 -> Result_Ball_ThreeFDQuery -> ApplyUpdates ();
            } // end if   удаление оценки из таблицы  Result_Ball
            DataModule1 -> Result_Ball_ThreeFDQuery -> Next ();
        } // end for если найдены тройки по предметам на повторном году обучения
        // ------------------
        DataModule1 -> Result_Ball_ThreeFDQuery -> CommitUpdates ();
        DataModule1 -> Public_PrikazFDQuery -> CommitUpdates ();
        DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> Public_PrikazFDQuery -> Close ();

        // --------------
        Panel14 -> Visible = false;
        Edit21 -> Text = ""; // № группы
        Edit22 -> Text = ""; // курс
        Edit30 -> Text = ""; // № приказа
        DateTimePicker15 -> Date = Now (); // дата приказа
        DateTimePicker15 -> Time = StrToTime ("00:00");
        DBLookupComboBox14 -> KeyValue = -1; // ФИО
        // --------------
        Panel15 -> Visible = false;
        Edit20 -> Text = ""; // № группы
        ComboBox9 -> ItemIndex = -1; // вид обучения
        // -----
        RadioGroup8 -> ItemIndex = -1;
    } // end try
    catch (...) { // catch
        ShowMessage ("Произошел сбой при сохранении, попробуйте еще раз!");
        DataModule1 -> Public_PrikazFDQuery -> CancelUpdates ();
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
    } // end catch
}

void __fastcall TDeloForm::RadioGroup8Click (TObject * Sender)
{ // Закладка повторный год обучения - Выбор категории только уход или возврат
    if (RadioGroup8 -> ItemIndex != -1)
    { // if делать все действия только по нажатию
        Panel14 -> Visible = false;
        Panel15 -> Visible = false;
        if (RadioGroup8 -> ItemIndex)
        { // if вернуть студента в группу и сделать его действующим

            DataModule1 -> PeopleUpFDQuery -> Close ();
            DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
            DataModule1 -> PeopleUpFDQuery -> SQL -> Add
                ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO, D_INCLUDE, DATE_END FROM PEOPLE People WHERE (N_FAC=" +
                AnsiString (nom_fac) + ") AND (STATUS_PEOPLE=4) ORDER BY FAM");
            DataModule1 -> PeopleUpFDQuery -> Open ();

            if (DataModule1 -> PeopleUpFDQuery -> RecordCount) {
                Panel14 -> Visible = true;
                DataModule1 -> Public_PrikazFDQuery -> Open ();
                // DataModule1 -> Public_PrikazQuery -> Insert ();
            }
            else {
                ShowMessage ("Нет студентов для возвращения!");
                RadioGroup8 -> ItemIndex = -1;
            }
        } // end if
        else { // else отправить студента на повторный год обучения
            Panel15 -> Visible = true;
            // Panel15 -> Top=112;
            Panel15 -> Height = 185;
        } // end else
    } // end if делать все действия только по нажатию
}

void __fastcall TDeloForm::BitBtn24Click (TObject * Sender)
{ // Закладка повторный год обучения - Сохранить при уходе на повторный год обучения
    // ---- сохранение изменений в  PeopleUpQuery
    try { // try
        if (DBLookupComboBox15 -> Text != "") { // if ФИО
            if (DataModule1 -> PeopleUpFDQuery -> State == dsInactive)
                DataModule1 -> PeopleUpFDQuery -> Open ();
            if (DataModule1 -> PeopleUpFDQuery -> State != dsEdit)
                DataModule1 -> PeopleUpFDQuery -> Edit ();
            // статус студенту изменяем
            DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 4;
            // изменяем инкремент группы
            DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = 18;
            DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
            DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
            DataModule1 -> PeopleUpFDQuery -> Close ();
            // --------
            Panel15 -> Visible = false;

            ComboBox9 -> ItemIndex = -1; // вид обучения
            Edit20 -> Text = ""; // номер группы
            DBLookupComboBox15 -> KeyValue = -1; // ФИО
            Panel15 -> Height = 72;

            // ---------
            RadioGroup8 -> ItemIndex = -1;
        } // end if
        else { // else
            ShowMessage ("Выберите фамилию студента!");
        } // end else
    } // end try
    catch (...) { // catch
        ShowMessage ("Произош сбой при сохранении, попробуйте еще раз");
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
    } // end catch
}

void __fastcall TDeloForm::BitBtn25Click (TObject * Sender)
{ // Закладка повторный год обучения - Отменить при уходе на повторный год обучения
    try {
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> Public_PrikazFDQuery -> Close ();
        // --------
        Panel15 -> Visible = false;
        Panel15 -> Height = 72;
        ComboBox9 -> ItemIndex = -1; // вид обучения
        Edit20 -> Text = ""; // номер группы
        DBLookupComboBox15 -> KeyValue = -1; // ФИО
        // --------
        RadioGroup8 -> ItemIndex = -1;
    }
    catch (...) {
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> Public_PrikazFDQuery -> Close ();
        // --------
        Panel15 -> Visible = false;
        Panel15 -> Height = 72;
        ComboBox9 -> ItemIndex = -1; // вид обучения
        Edit20 -> Text = ""; // номер группы
        DBLookupComboBox15 -> KeyValue = -1; // ФИО
        // -------------
        RadioGroup8 -> ItemIndex = -1;
        ShowMessage ("Нет данных для сохранения!!!!!");
        return;
    }
}

void __fastcall TDeloForm::BitBtn26Click (TObject * Sender) {
    DM3 -> PeopleDiplomFDQuery -> Close ();
    DM3 -> PeopleDiplomFDQuery -> ParamByName ("N_GROUP") -> Value =
        DBLookupComboBox16 -> KeyValue;
    DM3 -> PeopleDiplomFDQuery -> ParamByName ("VID_EDU") -> Value =
        ComboBox10 -> ItemIndex;
    DM3 -> PeopleDiplomFDQuery -> Open ();

    if (DM3 -> PeopleDiplomFDQuery -> RecordCount != 0) {
        DM3 -> QUALIFICFDQuery -> Close ();
        DM3 -> QUALIFICFDQuery -> Open ();
        DM3 -> QUALIFICFDQuery2 -> Close ();
        DM3 -> QUALIFICFDQuery2 -> Open ();
        Panel16 -> Visible = true;
    }
    else {
        ShowMessage (
            "У Вас нет ни одного студента в этой группе сдавших Гос. или диплом");
        DM3 -> PeopleDiplomFDQuery -> Close ();

    }

}

void __fastcall TDeloForm::BitBtn27Click (TObject * Sender)
{ // Закладка Диплом - кнопка Считать окончившими
    // проверки
    if (DBLookupComboBox17 -> Text == "") {
        ShowMessage ("Выберите ФИО студента!");
        return;
    }
    /* if ( (Edit23 -> Text=="")|| (DateEdit9 -> Text=="  .  .    "))
     {
     ShowMessage ("Введите номер и дату приказа!");
     return;
     } */
    if (nom_fac != 4 && (DBLookupComboBox18 -> Text == "" ||
        DBLookupComboBox19 -> Text == "")) {
        ShowMessage ("Укажите квалификации студента!");
        return;
    }
    if (DBLookupComboBox18 -> Text == DBLookupComboBox19 -> Text) {
        ShowMessage (
            "Вы не можете присвоить две одинаковые квалификации студенту!");
        return;
    }

    if (Edit24 -> Text == "") {
        ShowMessage ("Введите номер и дату протокола!");
        return;
    }
    if ( (Edit35 -> Text == "") || (Edit25 -> Text == "")) {
        ShowMessage ("Введите серию, № диплома и дату вручения диплома!");
        return;
    }
    // конец проверки
    DM3 -> DiplomFDQuery -> Close ();
    DM3 -> DiplomFDQuery -> ParamByName ("NOMER") -> Value =
        DBLookupComboBox17 -> KeyValue;
    DM3 -> DiplomFDQuery -> Open ();

    if (!DM3 -> DiplomFDQuery -> RecordCount) { // if   !DM3 -> Diplom -> RecordCount
        /* //Запись в таблицу Public_Prikaz
         DM3 -> Publik_PrikazFDQuery -> Open ();
         DM3 -> Publik_PrikazFDQuery -> Insert ();
         DM3 -> Publik_PrikazN_TYPE -> Value=9;
         DM3 -> Publik_PrikazN_PUBLIC_PRIKAZ -> Value=StrToInt (Edit23 -> Text);
         DM3 -> Publik_PrikazD_PUBLIC_PRIKAZ -> Value=DateEdit9 -> Text;
         DM3 -> Publik_PrikazNOMER -> Value=DBLookupComboBox17 -> KeyValue;
         DM3 -> Publik_PrikazDESCRIBE -> Value=DBLookupComboBox17 -> Text;
         try
         {//try сохранение приказа
         DM3 -> Publik_PrikazFDQuery -> ApplyUpdates ();
         DM3 -> Publik_PrikazFDQuery -> CommitUpdates ();
         DM3 -> Publik_PrikazFDQuery -> Close ();
         }//end try сохранение приказа
         catch (...)
         {//catch отмена
         DM3 -> Publik_PrikazFDQuery -> CancelUpdates ();
         ShowMessage ("Сбой в программе. Обратитесь к Администратору. Не записывает приказ о выпуске");
         }//end catch отмена */

        // Квалификации
        AnsiString Qu = "";
        if (DBLookupComboBox18 -> Text != "")
            Qu = Qu + DBLookupComboBox18 -> KeyValue + ",";
        if (DBLookupComboBox19 -> Text != "")
            Qu = Qu + DBLookupComboBox19 -> KeyValue;
        // обрезаем запятую, если выбрана одна квалификация
        if (DBLookupComboBox18 -> Text != "" && DBLookupComboBox19 -> Text == "")
            Qu = Qu.SubString (1, Qu.Length () - 1);

        // Запись в таблицу Diploma
        DM3 -> DiplomFDQuery -> Insert ();
        DM3 -> DiplomFDQueryNOMER -> Value = DBLookupComboBox17 -> KeyValue;
        // номер студента
        DM3 -> DiplomFDQueryQUALIFICATION -> Value = Qu; // квалификация
        DM3 -> DiplomFDQueryN_PROTOKOL -> Value = StrToInt (Edit24 -> Text);
        // номер протокола
        DM3 -> DiplomFDQueryD_PROTOKOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker10 -> Date);
        // дата протокола

        DM3 -> DiplomFDQueryD_VIPUSK -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker11 -> Date);
        // дата вручения диплома
        DM3 -> DiplomFDQueryN_RASPRED_WORK -> Value = 0;
        DM3 -> DiplomFDQueryDIRECTION_WORK -> Value = "";

        // ---новое
        DM3 -> DiplomFDQueryUROVEN -> Value = RadioGroup15 -> ItemIndex;
        // уровень образования
        /* ПОКА ЭТО МОЖНО СДЕЛАТЬ умножением RadioGroup16 -> ItemIndex на 2
         int type_d=0;//тип диплома
         switch (RadioGroup16 -> ItemIndex)
         {
         case 0: type_d=0; break; // 0-Диплом о высшем образовании
         case 1: type_d=2; break; // 2-Диплом о высшем образовании с отличием
         case 2: type_d=4; break; // 4-Диплом о высшем образовании (для иностранных граждан)
         case 3: type_d=6; break; // 6-Диплом о высшем образовании с отличием (для иностранных граждан)
         case 4: type_d=8; break; // 8-Диплом бакалавра
         case 5: type_d=10; break; // 10-Диплом магистра

         0-Диплом о высшем образовании
         1-Диплом о высшем образовании (дубликат)
         2-Диплом о высшем образовании с отличием
         3-Диплом о высшем образовании с отличием (дубликат)
         4-Диплом о высшем образовании (для иностранных граждан)
         5-Диплом о высшем образовании (для иностранных граждан) (дубликат)
         6-Диплом о высшем образовании с отличием (для иностранных граждан)
         7-Диплом о высшем образовании с отличием (для иностранных граждан) (дубликат)
         8-Диплом бакалавра
         9-Диплом бакалавра (дубликат)
         10-Диплом магистра
         11-Диплом магистра (дубликат)
         12-Диплом бакалавра с отличием

         } */

        DM3 -> DiplomFDQueryTYPE_DIPLOM -> Value = RadioGroup16 -> ItemIndex * 2;
        // тип диплома
        DM3 -> DiplomFDQuerySERIA -> Value = Edit35 -> Text; // серия диплома
        DM3 -> DiplomFDQueryNOM_DIPLOM -> Value = Edit25 -> Text; // № диплома
        // текстовка номера и серии диплома для старого поля, чтобы не переделывать большой кусок
        if (RadioGroup16 -> ItemIndex == 1 || RadioGroup16 -> ItemIndex == 3 ||
            RadioGroup16 -> ItemIndex == 6) { // if диплом с отличием
            DM3 -> DiplomFDQueryN_DIPLOM -> Value = "с отличием " + Edit35 -> Text +
                " №" + Edit25 -> Text;
        }
        else
            DM3 -> DiplomFDQueryN_DIPLOM -> Value =
                Edit35 -> Text + " №" + Edit25 -> Text;

        try { // try сохранение диплома
            DM3 -> DiplomFDQuery -> ApplyUpdates ();
            DM3 -> DiplomFDQuery -> CommitUpdates ();
            DM3 -> DiplomFDQuery -> Close ();
            Edit25 -> Text = "";
            // очищение номера диплома
            DM3 -> PeopleDiplomFDQuery -> Close ();
            DM3 -> PeopleDiplomFDQuery -> Open ();
        } // end try сохранение диплома
        catch (...) { // catch сбой при сохранении диплома
            DM3 -> DiplomFDQuery -> CancelUpdates ();
            // Otkat (); если убираем добавление приказа о выпуске - то и удалять его не надо!!!!!!!!!!!
            ShowMessage (
                "Сбой в программе!\nОбратитесь к Администратору.\nНе сохраняет информацию по Диплому!");
        } // end catch сбой при сохранении диплома
    } // end if   !DM3 -> Diplom -> RecordCount
    else { // else есть запись о дипломе
        ShowMessage (
            "У этого студента уже есть информация о дипломе!\nОбратитесь к Администратору");
    }

}

void __fastcall TDeloForm::Otkat () { // откат сохранения записи в приказах
    // Удаление приказа
    DataModule1 -> Publik_PrikazFDQuery -> Close ();
    DataModule1 -> Publik_PrikazFDQuery -> Open ();
    TLocateOptions fl;
    Variant loc[2];
    loc[0] = Variant (DBLookupComboBox17 -> KeyValue);
    loc[1] = Variant ("9");
    if (DataModule1 -> Publik_PrikazFDQuery -> Locate ("NOMER;N_TYPE",
        VarArrayOf (loc, 1), fl)) { // if нашли эту запись
        DataModule1 -> Publik_PrikazFDQuery -> Delete ();
        try { // try подтверждение удаления
            DataModule1 -> Publik_PrikazFDQuery -> ApplyUpdates ();
            DataModule1 -> Publik_PrikazFDQuery -> CommitUpdates ();
            DataModule1 -> Publik_PrikazFDQuery -> Close ();
        } // end try подтверждение удаления
        catch (...) { // catch проблемы с удалением
            DataModule1 -> Publik_PrikazFDQuery -> CancelUpdates ();
            ShowMessage ("Не могу удалить  приказ о выпуске");
        }
    } // end if нашли эту запись
}

void __fastcall TDeloForm::ComboBox10Change (TObject * Sender) {
    Panel16 -> Visible = false;
    DM3 -> Group_VipuskFDQuery -> Close ();
    DM3 -> Group_VipuskFDQuery -> SQL -> Clear ();
    DM3 -> Group_VipuskFDQuery -> Params -> Clear ();
    DM3 -> Group_VipuskFDQuery -> SQL -> Add (SQL_rem);
    DM3 -> Group_VipuskFDQuery -> ParamByName ("VID_EDU") -> Value =
        ComboBox10 -> ItemIndex;
    AnsiString Param_s = "", Param_b = "";
    /* if (ComboBox10 -> ItemIndex==0)
     {
     Param=IntToStr (nom_fac)+"5_";
     }
     if (ComboBox10 -> ItemIndex==1)
     {
     Param=IntToStr (nom_fac)+"6_";
     } */

    if (nom_fac != 3) {
        Param_s = IntToStr (nom_fac);
        Param_b = IntToStr (nom_fac);
    }
    else {
        Param_s = "0";
        Param_b = "0";
    }

    if (ComboBox10 -> ItemIndex) {
        Param_s += "6_";
        Param_b += "5_";
    }
    else {
        Param_s += "5_";
        Param_b += "4_";
    }

    DM3 -> Group_VipuskFDQuery -> ParamByName ("N_GROUP_S") -> Value = Param_s;
    DM3 -> Group_VipuskFDQuery -> ParamByName ("N_GROUP_B") -> Value = Param_b;
    DM3 -> Group_VipuskFDQuery -> Open ();
}

void __fastcall TDeloForm::DBLookupComboBox16Click (TObject * Sender) {
    Panel16 -> Visible = false;
}

void __fastcall TDeloForm::BitBtn28Click (TObject * Sender) {
    if (ComboBox11 -> Text == "" || Edit26 -> Text == "")
        ShowMessage ("Введите все данные");
    else { //
        Variant sea[2];
        sea[0] = Variant (Edit26 -> Text);
        sea[1] = Variant (ComboBox11 -> ItemIndex);
        i_gr = DM2 -> Increment_GroupFDTable -> Lookup ("N_GROUP;VID_EDU",
            VarArrayOf (sea, 1), "INC_GROUP");
        if (!i_gr.IsNull ()) { // if IsNull
            DM3 -> Prikaz_DopuskPeopleFDQuery -> Close ();
            DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Clear ();
            DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Add ("SELECT NOMER, FAM, NAME, OTCH, POL, NAZ, PAPA, MAMA, MARIAGE, N_CHILD, EDUCATION, ARMY, SCHOLARSHIP, HOSTEL, NAME_EDUC, WHEN_EDUC, WHERE_EDUC, PHOTO, MIDDLE_B, N_VID_SPORT, N_DELA, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, EDU_WORK, D_PRIKAZ_KURS, N_FOUND, N_PRIKAZ_INCLUDE, D_PRIKAZ_INCLUDE, N_GROUP, STATUS_PEOPLE, INC_GROUP, WORK_BEFORE, ADDRESS_BEFORE, ADDRESS, ADDRESS_LIFE, DATA_R, F_OLD, PHONE, STATUS_KURS, N_ZACHET \
             FROM PEOPLE  where (STATUS_PEOPLE=1) and (INC_GROUP=" +
                VarToStr (i_gr) + ") AND (VID_EDU=" + ComboBox11 -> ItemIndex +
                ") ORDER BY FAM, NAME, OTCH");

            // DM3 -> Prikaz_DopuskPeople -> ParamByName ("INC_GROUP") -> Value=i_gr;
            // DM3 -> Prikaz_DopuskPeopleFDQuery -> ParamByName ("VID_EDU") -> Value=ComboBox6 -> ItemIndex;
            DM3 -> Prikaz_DopuskPeopleFDQuery -> Open ();
            if (DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount != 0) {
                // Формирование входного массива
                AnsiString *mas_stud[2];
                // массив номеров и фамилий студентов
                for (int i = 0; i < 2; i++)
                    mas_stud[i] =
                        new AnsiString
                        [DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount];
                //////////////////////////////////////////////////////////////////////////
                DM3 -> Prikaz_DopuskPeopleFDQuery -> First ();
                DualListDlg = new TDualListDlg (this);
                DualListDlg -> SrcList -> Items -> Clear ();
                DualListDlg -> DstList -> Items -> Clear ();
                // Формирование входного массива
                for (int j = 0;
                j <= DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount - 1; j++) {
                    mas_stud[0][j] = DM3 -> Prikaz_DopuskPeopleFDQueryFAM -> Value +
                        " " + DM3 -> Prikaz_DopuskPeopleFDQueryNAME -> Value + " " +
                        DM3 -> Prikaz_DopuskPeopleFDQueryOTCH -> Value;
                    DualListDlg -> SrcList -> Items -> AddObject (mas_stud[0][j],
                        (TObject*)
                        (DM3 -> Prikaz_DopuskPeopleFDQueryNOMER -> Value));
                    mas_stud[1][j] =
                        AnsiString (DM3 -> Prikaz_DopuskPeopleFDQueryNOMER -> Value);
                    DM3 -> Prikaz_DopuskPeopleFDQuery -> Next ();

                } // for  формирование входного массива
                // Мой компонент

                DualListDlg -> ShowModal ();

                if (DataModule2 -> printdlg == true) {
                    if (DualListDlg -> DstList -> Items -> Count != 0) {
                        // Формирование Query для выбора студентов
                        AnsiString Str_Nomer = "";
                        for (int i = 0;
                        i <= DualListDlg -> DstList -> Items -> Count - 1; i++) {
                            Str_Nomer += mas_stud[1][i] + ",";
                            // возвращаем номер студента
                        } // 1-ый for

                        Str_Nomer.SetLength (Str_Nomer.Length () - 1);
                        // Формирование Query для выхода
                        DM3 -> Prikaz_DopuskPeopleFDQuery -> Close ();
                        DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Clear ();
                        DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Add ("SELECT NOMER, FAM, NAME, OTCH, POL, NAZ, PAPA, MAMA, MARIAGE, N_CHILD, EDUCATION, ARMY, SCHOLARSHIP, HOSTEL, NAME_EDUC, WHEN_EDUC, WHERE_EDUC, PHOTO, MIDDLE_B, N_VID_SPORT, N_DELA, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, EDU_WORK, D_PRIKAZ_KURS, N_FOUND, N_PRIKAZ_INCLUDE, D_PRIKAZ_INCLUDE, N_GROUP, STATUS_PEOPLE, INC_GROUP, WORK_BEFORE, ADDRESS_BEFORE, ADDRESS, ADDRESS_LIFE, DATA_R, F_OLD, PHONE, STATUS_KURS, N_ZACHET \
                         FROM PEOPLE  where (STATUS_PEOPLE=1) and (INC_GROUP=" +
                            VarToStr (i_gr) + ") AND (NOMER IN (" + Str_Nomer +
                            ")) ORDER BY FAM, NAME, OTCH");

                        Label97 -> Enabled = true;
                        Edit27 -> Enabled = true;
                        Label98 -> Enabled = true;
                        DateTimePicker12 -> Enabled = true;
                        ListBox3 -> Clear ();
                        ListBox3 -> Visible = true;
                        Button1 -> Visible = true;

                        for (int i = 0;
                        i <= DualListDlg -> DstList -> Items -> Count - 1; i++) {

                            ListBox3 -> Items -> AddObject
                                (DualListDlg -> DstList -> Items -> Strings[i],
                                DualListDlg -> DstList -> Items -> Objects[i]);

                        }

                        //

                    } // if MyList1 -> FOutList -> Count!=0
                    else {
                        ShowMessage ("Вы не выбрали ни одного студента!");
                    }
                } // if MyList1 -> Execute (MyList1)
                delete DualListDlg;
            } // if  DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount!=0

        } // if i_gr.IsNull ()
        else {
            MessageBox (0, "Не найден указанный номер группы", "", MB_OK);

        } // else i_gr.IsNull ()

    } // else
}

// приказ на допуск к ГОСам

void __fastcall TDeloForm::Button111Click (TObject * Sender) {
    DataModule1 -> Publik_PrikazFDQuery -> Close ();
    DataModule1 -> Publik_PrikazFDQuery -> Open ();
    DM3 -> Prikaz_DopuskPeopleFDQuery -> First ();
    for (int i = 0; i <= ListBox113 -> Items -> Count - 1; i++) { // for
        bool save_pr = true; // переменная надо ли сохранить приказ

        Variant dopusk = DataModule1 -> Publik_PrikazFDQuery -> Lookup
            ("NOMER;N_TYPE", VarArrayOf (OPENARRAY (Variant,
            ( (int) (ListBox113 -> Items -> Objects[i]), 12))),
            "N_PUBLIC_PRIKAZ;D_PUBLIC_PRIKAZ");
        if (!dopusk.IsNull ()) { // if есть приказ
            AnsiString s = "Студент " + ListBox113 -> Items -> Strings[i] +
                "\nуже имеет допуск к ГОС экзаменам №" +
                VarToStr (dopusk.GetElement (0)) + " от " +
                VarToStr (dopusk.GetElement (1)) +
                ".\nCохранить ему новый приказ?";
            // !!!if (Application -> MessageBox (s.c_str (),"Предупреждение", MB_YESNO) == mrYes)
            if (MessageDlg (s.c_str (), mtWarning,
                TMsgDlgButtons () << mbYes << mbNo, 0) == mrYes)
                save_pr = true;
            else
                save_pr = false; // не сохранять
        } // end if есть приказ
        ///сохранение
        if (save_pr) { // if надо сохранить приказ
            DataModule1 -> Publik_PrikazFDQuery -> Insert ();
            DataModule1 -> Publik_PrikazFDQueryN_TYPE -> Value = 12;
            DataModule1 -> Publik_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
                StrToInt (Edit127 -> Text);
            DataModule1 -> Publik_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker112 -> Date);
            DataModule1 -> Publik_PrikazFDQueryNOMER -> Value =
                (int) (ListBox113 -> Items -> Objects[i]);
            DataModule1 -> Publik_PrikazFDQueryDESCRIBE -> Value =
                ListBox113 -> Items -> Strings[i];
            try {
                DataModule1 -> Publik_PrikazFDQuery -> ApplyUpdates ();
                DataModule1 -> Publik_PrikazFDQuery -> CommitUpdates ();
            }
            catch (...) {
                DataModule1 -> Publik_PrikazFDQuery -> CancelUpdates ();
                ShowMessage ("Сбой в формировании");
            }
        } // if надо сохранить приказ
        DM3 -> Prikaz_DopuskPeopleFDQuery -> Next ();
    } // end for

    ListBox113 -> Clear ();
    ListBox113 -> Visible = false;
    Button111 -> Visible = false;
    ComboBox111 -> ItemIndex = -1;
    Edit126 -> Clear ();
    Label197 -> Enabled = false;
    Label198 -> Enabled = false;
    Edit127 -> Clear ();
    DateTimePicker112 -> Date = Now ();
    DateTimePicker112 -> Time = StrToTime ("00:00");
    Edit127 -> Enabled = false;
    DateTimePicker112 -> Enabled = false;
    DataModule1 -> Publik_PrikazFDQuery -> Close ();
    DM3 -> Prikaz_DopuskPeopleFDQuery -> Close ();

}

// приказ на допуск к диплому

void __fastcall TDeloForm::Button1Click (TObject * Sender) {
    DataModule1 -> Publik_PrikazFDQuery -> Close ();
    DataModule1 -> Publik_PrikazFDQuery -> Open ();
    for (int i = 0; i <= ListBox3 -> Items -> Count - 1; i++) { // for
        bool save_pr = true; // переменная надо ли сохранить приказ

        Variant dopusk = DataModule1 -> Publik_PrikazFDQuery -> Lookup
            ("NOMER;N_TYPE", VarArrayOf (OPENARRAY (Variant,
            ( (int) (ListBox3 -> Items -> Objects[i]), 13))),
            "N_PUBLIC_PRIKAZ;D_PUBLIC_PRIKAZ");
        if (!dopusk.IsNull ()) { // if есть приказ
            AnsiString s =
                "Студент " + DM3 -> Prikaz_DopuskPeopleFDQueryFAM -> Value + " " +
                DM3 -> Prikaz_DopuskPeopleFDQueryNAME -> Value + " " +
                DM3 -> Prikaz_DopuskPeopleFDQueryOTCH -> Value + +
                "\nуже имеет допуск к защите диплома №" +
                VarToStr (dopusk.GetElement (0)) + " от " +
                VarToStr (dopusk.GetElement (1)) +
                ".\nCохранить ему новый приказ?";
            // !!!if (Application -> MessageBox (s.c_str (),"Предупреждение", MB_YESNO) == mrYes)
            if (MessageDlg (s.c_str (), mtWarning,
                TMsgDlgButtons () << mbYes << mbNo, 0) == mrYes)
                save_pr = true;
            else
                save_pr = false; // не сохранять
        } // end if есть приказ
        ///сохранение
        if (save_pr) { // if надо сохранить приказ
            DataModule1 -> Publik_PrikazFDQuery -> Insert ();
            DataModule1 -> Publik_PrikazFDQueryN_TYPE -> Value = 13;
            DataModule1 -> Publik_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
                StrToInt (Edit27 -> Text);
            DataModule1 -> Publik_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
                DateTimeToSQLTimeStamp (DateTimePicker12 -> Date);
            DataModule1 -> Publik_PrikazFDQueryNOMER -> Value =
                (int) (ListBox3 -> Items -> Objects[i]);
            DataModule1 -> Publik_PrikazFDQueryDESCRIBE -> Value =
                ListBox3 -> Items -> Strings[i];
            try {
                DataModule1 -> Publik_PrikazFDQuery -> ApplyUpdates ();
                DataModule1 -> Publik_PrikazFDQuery -> CommitUpdates ();
            }
            catch (...) {
                DataModule1 -> Publik_PrikazFDQuery -> CancelUpdates ();
                ShowMessage ("Сбой в формировании");
            }
        } // if надо сохранить приказ
    } // end for

    ListBox3 -> Clear ();
    ListBox3 -> Visible = false;
    Button1 -> Visible = false;
    ComboBox11 -> ItemIndex = -1;
    Edit26 -> Clear ();
    Label97 -> Enabled = false;
    Label98 -> Enabled = false;
    Edit27 -> Clear ();
    DateTimePicker12 -> Date = Now ();
    DateTimePicker12 -> Time = StrToTime ("00:00");
    Edit27 -> Enabled = false;
    DateTimePicker12 -> Enabled = false;
    DataModule1 -> Publik_PrikazFDQuery -> Close ();
}

void __fastcall TDeloForm::RadioGroup10Click (TObject * Sender) {
    // ShowMessage ("Закройте форму Личная карточка. Возможны проблемы с сохранением приказов.");
    switch (RadioGroup10 -> ItemIndex)
    { // switch выбор студентов действующих или академистов
    case -1: // нет выбора
        // --------
        ComboBox2 -> ItemIndex = -1;
        Edit2 -> Text = "";
        ComboBox2 -> Visible = false; // вид обучения
        Edit2 -> Visible = false; // группа
        BitBtn1 -> Visible = false; // кнопка выбора
        Label4 -> Visible = false;
        Label5 -> Visible = false;
        // ComboBox2 -> SetFocus ();
        // -------------

        Panel2 -> Visible = false;
        FIOLook -> KeyValue = -1; // очистка ФИО
        DBLookupComboBox1 -> KeyValue = -1; // очистка причины отчисления
        Edit28 -> Text = ""; // очистка № приказа
        DateTimePicker13 -> Date = Now (); // очистка даты приказа
        DateTimePicker13 -> Time = StrToTime ("00:00");
        break;
    case 0: // действующие студенты

        // --------
        ComboBox2 -> ItemIndex = -1;
        Edit2 -> Text = "";
        ComboBox2 -> Visible = true; // вид обучения
        Edit2 -> Visible = true; // группа
        BitBtn1 -> Visible = true; // кнопка выбора
        Label4 -> Visible = true;
        Label5 -> Visible = true;
        ComboBox2 -> SetFocus ();
        // ---
        Panel2 -> Visible = false;
        FIOLook -> KeyValue = -1; // очистка ФИО
        DBLookupComboBox1 -> KeyValue = -1; // очистка причины отчисления
        Edit28 -> Text = ""; // очистка № приказа
        DateTimePicker13 -> Date = Now (); // очистка даты приказа
        DateTimePicker13 -> Time = StrToTime ("00:00");
        break;
    case 1: // студенты академисты
        // --------
        ComboBox2 -> ItemIndex = -1;
        Edit2 -> Text = "";
        ComboBox2 -> Visible = false; // вид обучения
        Edit2 -> Visible = false; // группа
        BitBtn1 -> Visible = false; // кнопка выбора
        Label4 -> Visible = false;
        Label5 -> Visible = false;
        // -------------
        /*
         DataModule1 -> People_PartFDQuery -> Close ();
         DataModule1 -> People_PartFDQuery -> SQL -> Clear ();
         DataModule1 -> People_PartFDQuery -> SQL -> Add ("SELECT NOMER, FAM, NAME, OTCH, INC_GROUP, N_GROUP, VID_EDU, KURS, N_FOUND FROM PEOPLE WHERE (N_FAC="+AnsiString (nom_fac)+") AND (STATUS_PEOPLE=3) AND (INC_GROUP=:INC_GROUP) ORDER BY FAM, NAME, OTCH");
         DataModule1 -> People_PartFDQuery -> ParamByName ("INC_GROUP") -> AsInteger=18;
         DataModule1 -> People_PartFDQuery -> Open (); */

        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, D_INCLUDE, DATE_END, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO  FROM PEOPLE People WHERE (N_FAC=" +
            AnsiString (nom_fac) +
            ") AND (STATUS_PEOPLE=3) AND (INC_GROUP=:I_GR) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> ParamByName ("I_GR") -> AsInteger = 18;
        DataModule1 -> PeopleUpFDQuery -> Open ();

        // if (DataModule1 -> People_PartFDQuery -> RecordCount)
        if (DataModule1 -> PeopleUpFDQuery -> RecordCount)
        { // если студенты выбраны, то показываем панель и переводим Query в режим вставки
            Panel2 -> Visible = true;
            DataModule1 -> RestoreFDQuery -> Open ();
            // DataModule1 -> RestoreFDQuery -> Insert ();
        }
        else { // если записей не обнаружено
            ShowMessage ("Нет студентов, находящихся в академическом отпуске!");

        }
        break;

    } // end switch выбор студентов действующих или академистов
}

void __fastcall TDeloForm::TabSheet8Exit (TObject * Sender)
{ // при Exit с  TabSheet закрываем Query  для выбора данных по студентам
    if (DataModule1 -> PeopleUpFDQuery -> State != dsInactive)
        DataModule1 -> PeopleUpFDQuery -> Close ();
    if (DataModule1 -> People_PartFDQuery -> State != dsInactive)
        DataModule1 -> People_PartFDQuery -> Close ();
    DM2 -> SpecializFDTable -> Filtered = true;
}

void __fastcall TDeloForm::ComboBox7Change (TObject * Sender) {
    Panel11 -> Visible = false;
    RadioGroup3 -> ItemIndex = -1;
    Label64 -> Caption = "";
    DBLookupComboBox10 -> Visible = false;
    // ComboBox7 -> ItemIndex=-1;//вид обучения
    // Edit16 -> Text="";//  № группы на панели
}

void __fastcall TDeloForm::ComboBox5Change (TObject * Sender) {
    // очищение всех данных из компонентов и передача фокуса на вид обучения
    ListBox2 -> Visible = false;
    ListBox2 -> Clear ();
    Label35 -> Visible = false;
    Panel6 -> Visible = false;
    // -----
    Label33 -> Enabled = false;
    Label34 -> Enabled = false;
    Edit12 -> Enabled = false;
    Edit12 -> Text = "";
    DateTimePicker2 -> Enabled = false;
    DateTimePicker2 -> Date = Now ();
    DateTimePicker112 -> Date = Now ();
    DateTimePicker2 -> Time = StrToTime ("00:00");
    DateTimePicker112 -> Time = StrToTime ("00:00");
    // -----

    DataModule1 -> People_KursFDQuery -> Close ();
    DataModule1 -> Prikaz_KursFDQuery -> Close ();
    DataModule1 -> People_PartFDQuery -> Close ();
}

void __fastcall TDeloForm::FormCreate (TObject * Sender) {
    ShowMessage (
        "Внимание! Личная карточка при сохранением приказов должна быть закрыта.");
    DateTimePicker9 -> DateTime = Now ();
    DateTimePicker9 -> Time = 0;
    DateTimePicker10 -> DateTime = Now ();
    DateTimePicker10 -> Time = 0;
    DateTimePicker11 -> DateTime = Now ();
    DateTimePicker11 -> Time = 0;
    DateTimePicker18 -> DateTime = Now ();
    DateTimePicker18 -> Time = 0;
}

void __fastcall TDeloForm::RadioGroup12Click (TObject * Sender) {
    if (RadioGroup12 -> ItemIndex == 2 || RadioGroup12 -> ItemIndex == 3)
    { // if выбрано Обучался в другом вузе
        LabeledEdit1 -> Text = "";
        LabeledEdit1 -> Visible = true;
    }
    else
        LabeledEdit1 -> Visible = false;
}

void __fastcall TDeloForm::RadioGroup13Click (TObject * Sender)
{ // Закладка ОТПУСК
    // Выбор вида отпуска

    Clear_Holiday (); // очищение компонентов на закладке ОТПУСКА

    if (RadioGroup13 -> ItemIndex != -1) {
        DataModule1 -> PeopleUpFDQuery -> Close ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
        DataModule1 -> PeopleUpFDQuery -> SQL -> Add
            ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, D_INCLUDE, DATE_END, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO  FROM PEOPLE People WHERE (N_FAC=" +
            AnsiString (nom_fac) +
            ") AND (STATUS_PEOPLE in (1,3)) ORDER BY FAM, NAME, OTCH");
        DataModule1 -> PeopleUpFDQuery -> Open ();

        Label99 -> Visible = true;
        DBLookupComboBox22 -> Visible = true;
        if (RadioGroup13 -> ItemIndex == 2) {
            Label102 -> Caption = "Выход        с:";
            Label103 -> Enabled = false;
            DateTimePicker20 -> Enabled = false;
        }
        else {
            Label102 -> Caption = "Отпуск        с:";
            Label103 -> Enabled = true;
            DateTimePicker20 -> Enabled = true;
        }
    }

}

void __fastcall TDeloForm::Clear_Holiday ()
{ // очищение компонентов на закладке ОТПУСКА
    // ФИО
    Label99 -> Visible = true;
    DBLookupComboBox22 -> Visible = true;
    DBLookupComboBox22 -> KeyValue = -1;
    // ------
    Panel17 -> Visible = false;
    Edit4 -> Text = ""; // № приказа
    DateTimePicker19 -> Date = Now (); // Дата приказа
    DateTimePicker19 -> Time = StrToTime ("00:00");
    DBLookupComboBox21 -> KeyValue = -1; // Причина

    DateTimePicker20 -> Date = Now (); // Дата начала отпуска
    DateTimePicker20 -> Time = StrToTime ("00:00");
    DateTimePicker21 -> Date = Now ();
    // Дата окончания отпуска
    DateTimePicker21 -> Time = StrToTime ("00:00");
    // --------
    Panel18 -> Visible = false;
    // Специальность
    DBLookupComboBox23 -> KeyValue = -1;
    // Специализация
    DBLookupComboBox24 -> KeyValue = -1;
    // № группы
    Edit5 -> Text = "";
    // курс
    Edit34 -> Text = "";
    // форма обучения
    RadioGroup14 -> ItemIndex = -1;

    DataModule1 -> PeopleUpFDQuery -> Close ();

}

void __fastcall TDeloForm::DBLookupComboBox22CloseUp (TObject * Sender) {
    Panel17 -> Visible = true;

    switch (RadioGroup13 -> ItemIndex) { // switch
    case 2:
    case 5:
        Panel18 -> Visible = true;
        // Специальность
        DBLookupComboBox23 -> KeyValue =
            DataModule1 -> PeopleUpFDQueryN_SPEC -> Value;
        // Специализация
        DBLookupComboBox24 -> KeyValue =
            DataModule1 -> PeopleUpFDQueryN_SPECIALIZ -> Value;
        // № группы
        Edit5 -> Text = DataModule1 -> PeopleUpFDQueryN_GROUP -> Value;
        // курс
        Edit34 -> Text = AnsiString (DataModule1 -> PeopleUpFDQueryKURS -> Value);
        // форма обучения
        RadioGroup14 -> ItemIndex = DataModule1 -> PeopleUpFDQueryVID_EDU -> Value;
        break;

    default:
        Panel18 -> Visible = false;
        break;

    } // end switch
}

void __fastcall TDeloForm::BitBtn30Click (TObject * Sender)
{ // кнопка Отменить на закладке Отпуск
    Clear_Holiday ();
    RadioGroup13 -> ItemIndex = -1;
    // ФИО
    Label99 -> Visible = false;
    DBLookupComboBox22 -> Visible = false;
}

void __fastcall TDeloForm::BitBtn29Click (TObject * Sender)
{ // кнопка Сохранить на закладке Отпуск

    // ---проверки на вшивость
    if (Edit4 -> Text == "") {
        ShowMessage ("Введите номер и дату приказа!");
        return;
    }

    if (DBLookupComboBox21 -> KeyValue == -1) {
        ShowMessage ("Укажите причину!");
        return;
    }

    // --------

    switch (RadioGroup13 -> ItemIndex) { // switch
    case 2:
    case 5: // после студент становится действующим
        {
            // проверка на номер группы и факультет
            if (!check_fac_group (Edit5 -> Text))
                return;
            // функция проверки соответствия номера группы и номера курса
            if (!check_group_kurs (Edit5 -> Text, Edit34 -> Text))
                return;
            DataModule1 -> PeopleUpFDQuery -> Edit ();
            Variant i_gr = search_increment_group (Edit5 -> Text,
                RadioGroup14 -> ItemIndex);
            // ---------
            DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 1;
            // статус для действующего студента
            try { // инкремент группы
                DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = i_gr;
            }
            catch (...) { // catch ошибка
                ShowMessage ("Такой группы не существует!");
            } // end catch ошибка
            DataModule1 -> PeopleUpFDQueryN_GROUP -> Value = Edit5 -> Text;
            // номер группы
            DataModule1 -> PeopleUpFDQueryKURS -> Value =
                StrToInt (Edit34 -> Text); // курс
            DataModule1 -> PeopleUpFDQueryN_SPEC -> Value =
                DBLookupComboBox23 -> KeyValue; // Специальность
            DataModule1 -> PeopleUpFDQueryN_SPECIALIZ -> Value =
                DBLookupComboBox24 -> KeyValue; // Специализация
            DataModule1 -> PeopleUpFDQueryVID_EDU -> Value =
                RadioGroup14 -> ItemIndex; // форма обучения

            // Дата окончания 30.06.2___ //ПРОВЕРИТЬ!!!!! Не всегда привилоно!!!!
            AnsiString kurs_uch = "", year_end = "", date_end = "";

            if (DataModule1 -> PeopleUpFDQueryVID_EDU -> Value == 1) { // заочная
                kurs_uch = 6 - DataModule1 -> PeopleUpFDQueryKURS -> Value;
                // сколько курсов учиться
                year_end = uch_god + kurs_uch; // год окончания
                if (kurs_uch == 0)
                    year_end = uch_god + 1; // год окончания
            }
            else { // дневная
                kurs_uch = 5 - DataModule1 -> PeopleUpFDQueryKURS -> Value;
                // сколько курсов учиться
                year_end = uch_god + kurs_uch; // год окончания
                if (kurs_uch == 0)
                    year_end = uch_god + 1; // год окончания
            }
            date_end = "30.06." + year_end;
            DataModule1 -> PeopleUpFDQueryDATE_END -> Value =
                DateTimeToSQLTimeStamp (StrToDate (date_end));

            break;
        }
    default: // студент становится со статусом академиста
        {
            DataModule1 -> PeopleUpFDQuery -> Edit ();
            if (DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value == 1) {
                /* !!!if (Application -> MessageBox ("Этот студент был условно переведен на следующий курс. Изменить номер группы и курс?",
                 "Внимание", MB_OKCANCEL) == IDOK) */
                if (MessageDlg
                    ("Этот студент был условно переведен на следующий курс. Изменить номер группы и курс?",
                    mtConfirmation, TMsgDlgButtons () << mbOK << mbCancel,
                    0) == 1) { // if изменяем номер группы и курс на один меньше
                    int old_kurs = DataModule1 -> PeopleUpFDQueryKURS -> Value;
                    int old_gr =
                        StrToInt (DataModule1 -> PeopleUpFDQueryN_GROUP -> Value);
                    if (old_kurs != 1) {
                        DataModule1 -> PeopleUpFDQueryKURS -> Value =
                            (old_kurs - 1);
                        if (nom_fac == 3)
                        { // if это ОФКиТ - то надо спереди доставить 0
                            DataModule1 -> PeopleUpFDQueryN_GROUP -> Value =
                                "0" + IntToStr (old_gr - 10);
                        }
                        else
                            DataModule1 -> PeopleUpFDQueryN_GROUP -> Value =
                                IntToStr (old_gr - 10);
                    }
                }

                DataModule1 -> PeopleUpFDQuerySTATUS_KURS -> Value = 0;
            }
            DataModule1 -> PeopleUpFDQuerySTATUS_PEOPLE -> Value = 3;
            // статус для  студента в академическом отпуске
            DataModule1 -> PeopleUpFDQueryINC_GROUP -> Value = 18;
            // инкремент группы
            break;
        }
    } // end switch
    if (DataModule1 -> HolidayFDQuery -> State == dsInactive)
        DataModule1 -> HolidayFDQuery -> Open ();
    if (DataModule1 -> HolidayFDQuery -> State != dsInsert)
        DataModule1 -> HolidayFDQuery -> Insert ();
    // сохранение в табл Holiday номера студента
    DataModule1 -> HolidayFDQueryNOMER -> Value = DBLookupComboBox22 -> KeyValue;

    // дата приказа
    DataModule1 -> HolidayFDQueryD_PRIKAZ_HOL -> Value =
        DateTimeToSQLTimeStamp (DateTimePicker19 -> Date);

    ///---проверка на номер приказа
    try { // номер  приказа
        DataModule1 -> HolidayFDQueryN_PRIKAZ_HOL -> Value = StrToInt (Edit4 -> Text);
    }
    catch (...) { // catch ошибка
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
        DataModule1 -> HolidayFDQuery -> CancelUpdates ();
        ShowMessage ("Номер приказа должен быть числовым значением!");
        return;
    } // end catch ошибка

    // Причина
    DataModule1 -> HolidayFDQueryN_HOL -> Value = DBLookupComboBox21 -> KeyValue;

    // тип 1 -- уход в а/о; 2-- Продлен а/о;  3-- выход из а/о
    // 4  --  Академический отпуск
    // 5  --  Продление академического отпуска
    // 6  --  Выход из отпуска
    // 7  --  Отпуск по беременности и родам
    // 8  --  Отпуск по уходу за ребенком до 3-х лет
    // 9  --  Отпуск по уходу за реб. до 3-х лет со св. посещ.
    // 10 -- Отпуск по беременности
    // 11 -- Отпуск для прохождения военной службы
    DataModule1 -> HolidayFDQueryTYPE_HOL -> Value = RadioGroup13 -> ItemIndex + 4;

    // дата начала а/о
    if (RadioGroup13 -> ItemIndex != 2) {
        DateTimePicker20 -> Time = StrToTime ("00:00");
        DataModule1 -> HolidayFDQueryD_BEGIN_HOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker20 -> Date);
    }
    else {
        // Дата с которой выходит из отпуска, но заносим  в D_END_HOL
        DataModule1 -> HolidayFDQueryD_END_HOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker20 -> Date);
    }

    // дата окончания а/о
    if (t) {
        DataModule1 -> HolidayFDQueryD_END_HOL -> Value =
            DateTimeToSQLTimeStamp (DateTimePicker21 -> Date);
    }

    // ---------
    try { // try сохранение результатов
        DataModule1 -> PeopleUpFDQuery -> ApplyUpdates ();
        DataModule1 -> PeopleUpFDQuery -> CommitUpdates ();
        DataModule1 -> HolidayFDQuery -> ApplyUpdates ();
        DataModule1 -> HolidayFDQuery -> CommitUpdates ();
        Clear_Holiday ();
        RadioGroup13 -> ItemIndex = -1;
        // ФИО
        Label99 -> Visible = false;
        DBLookupComboBox22 -> Visible = false;
        ShowMessage ("Сохранение прошло удачно!");
    } // end try сохранение результатов
    catch (...) { // catch ошибка
        DataModule1 -> PeopleUpFDQuery -> CancelUpdates ();
        DataModule1 -> HolidayFDQuery -> CancelUpdates ();
        ShowMessage ("Произошел сбой при сохранении!");
    } // end catch ошибка

}

void __fastcall TDeloForm::Edit23KeyPress (TObject * Sender, char &Key) {
    DataModule1 -> Edit_Key (Key);
    // Как сделать, чтобы в TEdit можно было вводить только числа?
}

void __fastcall TDeloForm::BitBtn31Click (TObject * Sender)
{ // Выбрать студентов на формирование приказа о выпуске

    if (ComboBox14 -> Text == "") {
        ShowMessage ("Выберите форму обучения!");
        return;
    }
    int kurs_v = 4; // Выпускной курс
    if (ComboBox14 -> ItemIndex)
        kurs_v = 5;

    // switch (RadioGroup17 -> ItemIndex)
    // { //switch
    // case 0:
    // kurs_v=6;
    // break;
    // case 1:
    // kurs_v=5;
    // break;
    // }//end switch

    // if (RadioGroup17 -> ItemIndex)
    // {
    // if (ComboBox14 -> ItemIndex) kurs_v=5;
    // else kurs_v=4;//Выпускной курс
    // }
    // else
    // {
    // if (ComboBox14 -> ItemIndex) kurs_v=6;
    // else kurs_v=5;//Выпускной курс
    // }

    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> Close ();
    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> ParamByName ("N_FAC") -> AsSmallInt =
        nom_fac;
    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> ParamByName ("EDU") -> AsSmallInt =
        ComboBox14 -> ItemIndex;
    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> ParamByName ("KURS") -> AsSmallInt =
        kurs_v;
    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> Open ();
    DataModule1 -> Diplom_Prikaz_vipusk_countFDQuery -> Close ();
    DataModule1 -> Diplom_Prikaz_vipusk_countFDQuery -> ParamByName ("N_FAC")
        -> AsSmallInt = nom_fac;
    DataModule1 -> Diplom_Prikaz_vipusk_countFDQuery -> ParamByName ("EDU")
        -> AsSmallInt = ComboBox14 -> ItemIndex;
    DataModule1 -> Diplom_Prikaz_vipusk_countFDQuery -> ParamByName ("KURS")
        -> AsSmallInt = kurs_v;
    DataModule1 -> Diplom_Prikaz_vipusk_countFDQuery -> Open ();
    if (DataModule1 -> Diplom_Prikaz_vipusk_countFDQueryCOUNT -> Value) {
        // Формирование входного массива

        for (int i = 0; i < 2; i++) { // for1
            mas_fio_nomer[i] =
                new AnsiString
                [DataModule1 -> Diplom_Prikaz_vipusk_countFDQueryCOUNT -> Value];
        } // end for 1
        mas = 1; // означает, что массив создан
        //////////////////////////////////////////////////////////////////////////
        DualListDlg = new TDualListDlg (this);
        DualListDlg -> SrcList -> Items -> Clear ();
        DualListDlg -> DstList -> Items -> Clear ();
        // Формирование входного массива
        for (int j = 0;
        j <= DataModule1 -> Diplom_Prikaz_vipusk_countFDQueryCOUNT -> Value -
            1; j++) {
            mas_fio_nomer[0][j] =
                DataModule1 -> Diplom_Prikaz_vipuskFDQueryFAM -> Value + " " +
                DataModule1 -> Diplom_Prikaz_vipuskFDQueryNAME -> Value + " " +
                DataModule1 -> Diplom_Prikaz_vipuskFDQueryOTCH -> Value;
            DualListDlg -> SrcList -> Items -> AddObject (mas_fio_nomer[0][j],
                (TObject*)
                (DataModule1 -> Diplom_Prikaz_vipuskFDQueryNOMER -> Value));
            mas_fio_nomer[1][j] =
                AnsiString (DataModule1 -> Diplom_Prikaz_vipuskFDQueryNOMER
                -> Value);
            DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> Next ();

        } // for  формирование входного массива
        // Мой компонент
        ListBox4 -> Clear ();
        DualListDlg -> ShowModal ();
        if (DataModule2 -> printdlg == true) {
            if (DualListDlg -> DstList -> Count != 0) {
                for (int i = 0; i <= DualListDlg -> DstList -> Count - 1; i++) {
                    ListBox4 -> Items -> AddObject
                        (AnsiString (i + 1) + ". " + mas_fio_nomer[0][i],
                        DualListDlg -> DstList -> Items -> Objects[i]);
                } // 1-ый for
                // ------
                Label112 -> Enabled = true;
                Edit36 -> Enabled = true;
                Label113 -> Enabled = true;
                DateTimePicker22 -> Enabled = true;
                Label114 -> Enabled = true;
                DateTimePicker23 -> Enabled = true;
                ListBox4 -> Visible = true;
                Button3 -> Visible = true;

            } // if MyList1 -> FOutList -> Count!=0
            else {
                ShowMessage ("Вы не выбрали ни одного студента!");
            }
        } // if MyList1 -> Execute (MyList1)
        delete DualListDlg;
    }

}

void __fastcall TDeloForm::ComboBox14Change (TObject * Sender)
{ // изменение формы обучения
    Label112 -> Enabled = false;
    Edit36 -> Enabled = false;
    Label113 -> Enabled = false;
    DateTimePicker22 -> Enabled = false;
    Label114 -> Enabled = false;
    DateTimePicker23 -> Enabled = false;
    ListBox4 -> Visible = false;
    Button3 -> Visible = false;

    Edit36 -> Text = "";
    DateTimePicker22 -> Date = Now ();
    DateTimePicker22 -> Time = StrToTime ("00:00");
    DateTimePicker23 -> Date = Now ();
    DateTimePicker23 -> Time = StrToTime ("00:00");

    // if (ComboBox14 -> ItemIndex==0) RadioGroup17 -> Visible=false;
    // else RadioGroup17 -> Visible=true;
}

void __fastcall TDeloForm::Button3Click (TObject * Sender)
{ // Сохранить приказ на выпуск

    for (int i = 0; i < ListBox4 -> Items -> Count; i++) { // for i
        AnsiString List_text = ListBox4 -> Items -> Strings[i];
        int k = List_text.Pos ('.');
        // Урезаем запись до нужной для базы данных
        List_text.Delete (1, k + 1);
        Save_PrikazVipusk (List_text, i);
        // Сохранение приказа на выпуск
    } // for i
    // ------------------
    Label112 -> Enabled = false;
    Edit36 -> Enabled = false;
    Label113 -> Enabled = false;
    DateTimePicker22 -> Enabled = false;
    Label114 -> Enabled = false;
    DateTimePicker23 -> Enabled = false;
    ListBox4 -> Visible = false;
    Button3 -> Visible = false;

    Edit36 -> Text = "";
    DateTimePicker22 -> Date = Now ();
    DateTimePicker22 -> Time = StrToTime ("00:00");
    DateTimePicker23 -> Date = Now ();
    DateTimePicker23 -> Time = StrToTime ("00:00");
}


void __fastcall TDeloForm::BitBtn128Click (TObject * Sender) {

    if (ComboBox111 -> Text == "" || Edit126 -> Text == "")
        ShowMessage ("Введите все данные");
    else { //
        Variant sea2[2];
        sea2[0] = Variant (Edit126 -> Text);
        sea2[1] = Variant (ComboBox111 -> ItemIndex);
        i_gr = DM2 -> Increment_GroupFDTable -> Lookup ("N_GROUP;VID_EDU",
            VarArrayOf (sea2, 1), "INC_GROUP");
        if (!i_gr.IsNull ()) { // if IsNull
            DM3 -> Prikaz_DopuskPeopleFDQuery -> Close ();
            DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Clear ();
            DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Add ("SELECT NOMER, FAM, NAME, OTCH, POL, NAZ, PAPA, MAMA, MARIAGE, N_CHILD, EDUCATION, ARMY, SCHOLARSHIP, HOSTEL, NAME_EDUC, WHEN_EDUC, WHERE_EDUC, PHOTO, MIDDLE_B, N_VID_SPORT, N_DELA, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, EDU_WORK, D_PRIKAZ_KURS, N_FOUND, N_PRIKAZ_INCLUDE, D_PRIKAZ_INCLUDE, N_GROUP, STATUS_PEOPLE, INC_GROUP, WORK_BEFORE, ADDRESS_BEFORE, ADDRESS, ADDRESS_LIFE, DATA_R, F_OLD, PHONE, STATUS_KURS, N_ZACHET \
             FROM PEOPLE  where (STATUS_PEOPLE=1) and (INC_GROUP=" +
                VarToStr (i_gr) + ") AND (VID_EDU=" + ComboBox111 -> ItemIndex +
                ") ORDER BY FAM, NAME, OTCH");

            // DM3 -> Prikaz_DopuskPeopleFDQuery -> ParamByName ("INC_GROUP") -> Value=i_gr;
            // DM3 -> Prikaz_DopuskPeopleFDQuery -> ParamByName ("VID_EDU") -> Value=ComboBox6 -> ItemIndex;
            DM3 -> Prikaz_DopuskPeopleFDQuery -> Open ();
            if (DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount != 0) {
                // Формирование входного массива
                AnsiString *mas_stud2[2];
                // массив номеров и фамилий студентов
                for (int i = 0; i < 2; i++)
                    mas_stud2[i] =
                        new AnsiString
                        [DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount];
                //////////////////////////////////////////////////////////////////////////
                DM3 -> Prikaz_DopuskPeopleFDQuery -> First ();
                DualListDlg = new TDualListDlg (this);
                DualListDlg -> SrcList -> Items -> Clear ();
                DualListDlg -> DstList -> Items -> Clear ();
                // Формирование входного массива
                for (int j = 0;
                j <= DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount - 1; j++) {
                    mas_stud2[0][j] =
                        DM3 -> Prikaz_DopuskPeopleFDQueryFAM -> Value + " " +
                        DM3 -> Prikaz_DopuskPeopleFDQueryNAME -> Value + " " +
                        DM3 -> Prikaz_DopuskPeopleFDQueryOTCH -> Value;
                    DualListDlg -> SrcList -> Items -> AddObject (mas_stud2[0][j],
                        (TObject*)
                        (DM3 -> Prikaz_DopuskPeopleFDQueryNOMER -> Value));
                    mas_stud2[1][j] =
                        AnsiString (DM3 -> Prikaz_DopuskPeopleFDQueryNOMER -> Value);
                    DM3 -> Prikaz_DopuskPeopleFDQuery -> Next ();

                } // for  формирование входного массива
                // Мой компонент

                DualListDlg -> ShowModal ();

                if (DataModule2 -> printdlg == true) {
                    if (DualListDlg -> DstList -> Items -> Count != 0) {
                        // Формирование Query для выбора студентов
                        AnsiString Str_Nomer = "";
                        for (int i = 0;
                        i <= DualListDlg -> DstList -> Count - 1; i++) {
                            Str_Nomer += mas_stud2[1][i] + ",";
                            // возвращаем номер студента
                        } // 1-ый for

                        Str_Nomer.SetLength (Str_Nomer.Length () - 1);
                        // Формирование Query для выхода
                        DM3 -> Prikaz_DopuskPeopleFDQuery -> Close ();
                        DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Clear ();
                        DM3 -> Prikaz_DopuskPeopleFDQuery -> SQL -> Add ("SELECT NOMER, FAM, NAME, OTCH, POL, NAZ, PAPA, MAMA, MARIAGE, N_CHILD, EDUCATION, ARMY, SCHOLARSHIP, HOSTEL, NAME_EDUC, WHEN_EDUC, WHERE_EDUC, PHOTO, MIDDLE_B, N_VID_SPORT, N_DELA, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, EDU_WORK, D_PRIKAZ_KURS, N_FOUND, N_PRIKAZ_INCLUDE, D_PRIKAZ_INCLUDE, N_GROUP, STATUS_PEOPLE, INC_GROUP, WORK_BEFORE, ADDRESS_BEFORE, ADDRESS, ADDRESS_LIFE, DATA_R, F_OLD, PHONE, STATUS_KURS, N_ZACHET \
                         FROM PEOPLE  where (STATUS_PEOPLE=1) and (INC_GROUP=" +
                            VarToStr (i_gr) + ") AND (NOMER IN (" + Str_Nomer +
                            ")) ORDER BY FAM, NAME, OTCH");
                        DM3 -> Prikaz_DopuskPeopleFDQuery -> Open ();
                        Label197 -> Enabled = true;
                        Edit127 -> Enabled = true;
                        Label198 -> Enabled = true;
                        DateTimePicker112 -> Enabled = true;
                        ListBox113 -> Clear ();
                        ListBox113 -> Visible = true;
                        Button111 -> Visible = true;

                        for (int i = 0;
                        i <= DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount -
                            1; i++) {

                            ListBox113 -> Items -> AddObject
                                (DualListDlg -> DstList -> Items -> Strings[i],
                                DualListDlg -> DstList -> Items -> Objects[i]);
                            DM3 -> Prikaz_DopuskPeopleFDQuery -> Next ();
                        }
                        DataModule1 -> Publik_PrikazFDQuery -> Close ();
                        //

                    } // if MyList1 -> FOutList -> Count!=0
                    else {
                        ShowMessage ("Вы не выбрали ни одного студента!");
                    }
                } // if MyList1 -> Execute (MyList1)
                delete DualListDlg;
            } // if  DM3 -> Prikaz_DopuskPeopleFDQuery -> RecordCount!=0

        } // if i_gr.IsNull ()
        else {
            MessageBox (0, "Не найден указанный номер группы", "", MB_OK);

        } // else i_gr.IsNull ()

    } // else

}

void __fastcall TDeloForm::Save_PrikazVipusk (AnsiString Fio, int j)
{ // Сохранение приказа на выпуск
    TLocateOptions Opts;
    Variant v;
    v = DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> Locate ("NOMER",
        (int) (ListBox4 -> Items -> Objects[j]), Opts);

    if (v.IsNull ()) {
        AnsiString text = "Не удалось сохранить приказ для студента: " +
            ListBox4 -> Items -> Strings[j];
        ShowMessage (text.c_str ());
        return;
    }
    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> Edit ();
    DataModule1 -> Diplom_Prikaz_vipuskFDQueryD_PRIKAZ_KURS -> Value =
        DateTimeToSQLTimeStamp (DateTimePicker23 -> Date);
    // считать окончившим с...
    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> ApplyUpdates ();
    DataModule1 -> Diplom_Prikaz_vipuskFDQuery -> CommitUpdates ();

    // Запись в таблицу Public_Prikaz
    DataModule1 -> Publik_PrikazFDQuery -> Open ();
    DataModule1 -> Publik_PrikazFDQuery -> Insert ();
    DataModule1 -> Publik_PrikazFDQueryN_TYPE -> Value = 9;
    DataModule1 -> Publik_PrikazFDQueryN_PUBLIC_PRIKAZ -> Value =
        StrToInt (Edit36 -> Text);
    DataModule1 -> Publik_PrikazFDQueryD_PUBLIC_PRIKAZ -> Value =
        DateTimeToSQLTimeStamp (DateTimePicker22 -> Date);
    DataModule1 -> Publik_PrikazFDQueryNOMER -> Value =
        (int) (ListBox4 -> Items -> Objects[j]);
    DataModule1 -> Publik_PrikazFDQueryDESCRIBE -> Value =
        ListBox4 -> Items -> Strings[j];
    try { // try сохранение приказа
        DataModule1 -> Publik_PrikazFDQuery -> ApplyUpdates ();
        DataModule1 -> Publik_PrikazFDQuery -> CommitUpdates ();
        DataModule1 -> Publik_PrikazFDQuery -> Close ();
    } // end try сохранение приказа
    catch (...) { // catch отмена
        DataModule1 -> Publik_PrikazFDQuery -> CancelUpdates ();
        ShowMessage (
            "Сбой в программе. Обратитесь к Администратору. Не записывает приказ о выпуске");
    } // end catch отмена
    return;

    }

void __fastcall TDeloForm::RadioGroup18Click (TObject * Sender) {
    if (RadioGroup18 -> ItemIndex == 1) {
        Label66 -> Caption = "Курс:";
        Button4 -> Visible = True;
        BitBtn17 -> Visible = False;
        Panel13 -> Visible = False;
        Edit17 -> Text = "";
    }
    else {
        Label66 -> Caption = "Группа:";
        Button4 -> Visible = False;
        BitBtn17 -> Visible = True;
        Panel13 -> Visible = False;
        Edit17 -> Text = "";
    }
}

void __fastcall TDeloForm::Button4Click (TObject * Sender) {
    ListBox5 -> Clear ();
    ListBox5 -> Visible = True;
    ListBox5 -> Top = 10;
    RadioGroup6 -> Visible = False;
    RadioGroup7 -> Visible = False;
    Label72 -> Visible = False;
    Label73 -> Visible = False;
    Edit19 -> Visible = False;
    DBLookupComboBox12 -> Visible = False;

    // Закладка Перевод, действие по кнопке выбрать студента
    if (ComboBox8 -> Text == "" || Edit17 -> Text == "")
    { // if проверка на ввод всех данных
        ShowMessage ("Введите все данные!");
        return;
    } // end if проверка на ввод всех данных

    // sql_old="SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND FROM PEOPLE People";

    DataModule1 -> PeopleUpFDQuery -> Close ();
    DataModule1 -> PeopleUpFDQuery -> SQL -> Clear ();
    DataModule1 -> PeopleUpFDQuery -> SQL -> Add
        ("SELECT NOMER, VID_EDU, N_FAC, KURS, N_SPEC, N_SPECIALIZ, N_PRIKAZ_KURS, D_PRIKAZ_KURS, D_INCLUDE, DATE_END, N_GROUP, INC_GROUP, F_OLD, STATUS_PEOPLE, FAM, NAME, OTCH, DATA_R, STATUS_KURS, N_FOUND, FAM ||' '|| NAME ||' ' || OTCH as FIO  FROM PEOPLE People WHERE (N_FAC=" +
        AnsiString (nom_fac) +
        ") AND (STATUS_PEOPLE=1) AND (KURS=:KURS) AND (VID_EDU=:VID_EDU)  ORDER BY FAM, NAME, OTCH");
    DataModule1 -> PeopleUpFDQuery -> ParamByName ("KURS") -> AsInteger =
        Variant (Edit17 -> Text);
    DataModule1 -> PeopleUpFDQuery -> ParamByName ("VID_EDU") -> AsInteger =
        ComboBox8 -> ItemIndex;
    DataModule1 -> PeopleUpFDQuery -> Open ();

    if (DataModule1 -> PeopleUpFDQuery -> RecordCount)
    { // if проверка на   RecordCount
        Panel12 -> Height = 61;
        // возвращаем панель к первоначальным размерам
        Panel13 -> Visible = true; // панель перевода списком
        DataModule1 -> Public_PrikazFDQuery -> Open ();
        DataModule1 -> Public_PrikazFDQuery -> Insert ();
    } // end if проверка на   RecordCount
    else { // else проверка на   RecordCount
        ShowMessage ("Нет ни одного студента по заданному условию!");
        Edit17 -> SetFocus ();
    } // end else проверка на   RecordCount
    DualListDlg = new TDualListDlg (this);
    DualListDlg -> SrcList -> Items -> Clear ();
    DualListDlg -> DstList -> Items -> Clear ();
    for (int i = 0; i < DataModule1 -> PeopleUpFDQuery -> RecordCount; i++) {
        DualListDlg -> SrcList -> Items -> AddObject
            (DataModule1 -> PeopleUpFDQueryFAM -> Value + ' ' +
            DataModule1 -> PeopleUpFDQueryNAME -> Value + ' ' +
            DataModule1 -> PeopleUpFDQueryOTCH -> Value + ", " +
            DataModule1 -> PeopleUpFDQueryNOMER -> Value,
            (TObject*) (DataModule1 -> PeopleUpFDQueryNOMER -> Value));
        DataModule1 -> PeopleUpFDQuery -> Next ();
    }

    DualListDlg -> ShowModal ();

    if (DataModule2 -> printdlg == true) {
        if (!DualListDlg -> DstList -> Items -> Count)
        { // if  если не выбрано ни одного студента в   FOutList
            DataModule1 -> PeopleUpFDQuery -> Close ();
            DataModule1 -> Public_PrikazFDQuery -> Close ();
            ShowMessage ("Вы не выбрали ни одного студента!");
        } // end if  не выбрано ни одного студента в   FOutList

        ListBox5 -> Visible = true;
        for (int i = 0; i < DualListDlg -> DstList -> Items -> Count; i++) {
            ListBox5 -> Items -> AddObject (AnsiString (i + 1) + ". " +
                DualListDlg -> DstList -> Items -> Strings[i],
                DualListDlg -> DstList -> Items -> Objects[i]);
        }
    } // Execute ();
    delete DualListDlg;
}

void __fastcall TDeloForm::DateTimePicker1Change (TObject * Sender) {
    DateTimePicker1 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker10Change (TObject * Sender) {
    DateTimePicker10 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker11Change (TObject * Sender) {
    DateTimePicker11 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker112Change (TObject * Sender) {
    DateTimePicker112 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker12Change (TObject * Sender) {
    DateTimePicker12 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker13Change (TObject * Sender) {
    DateTimePicker13 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker14Change (TObject * Sender) {
    DateTimePicker14 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker15Change (TObject * Sender) {
    DateTimePicker15 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker16Change (TObject * Sender) {
    DateTimePicker16 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker17Change (TObject * Sender) {
    DateTimePicker17 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker18Change (TObject * Sender) {
    DateTimePicker18 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker19Change (TObject * Sender) {
    DateTimePicker19 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker2Change (TObject * Sender) {
    DateTimePicker2 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker20Change (TObject * Sender) {
    DateTimePicker20 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker21Change (TObject * Sender) {
    DateTimePicker21 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker22Change (TObject * Sender) {
    DateTimePicker22 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker23Change (TObject * Sender) {
    DateTimePicker23 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker3Change (TObject * Sender) {
    DateTimePicker3 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker4Change (TObject * Sender) {
    DateTimePicker4 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker5Change (TObject * Sender) {
    DateTimePicker5 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker6Change (TObject * Sender) {
    DateTimePicker6 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker7Change (TObject * Sender) {
    DateTimePicker7 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker8Change (TObject * Sender) {
    DateTimePicker8 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::DateTimePicker9Change (TObject * Sender) {
    DateTimePicker9 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::Button5Click (TObject * Sender) {
    if (Button5 -> Caption == "скрыть") {
        Button5 -> Caption = "отображать";
        t = false;
        DateTimePicker21 -> Visible = False;
    }
    else {
        Button5 -> Caption = "скрыть";
        t = true;
        DateTimePicker21 -> Visible = True;
    }
}


void __fastcall TDeloForm::PageControl1Change (TObject * Sender) {
    DateTimePicker14 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::TabSheet111Show (TObject * Sender) {
    DateTimePicker112 -> Date = Now ();
    DateTimePicker112 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::TabSheet11Show (TObject * Sender) {
    DateTimePicker12 -> Date = Now ();
    DateTimePicker12 -> Time = StrToTime ("00:00");
}

void __fastcall TDeloForm::Image1Click (TObject * Sender) {
    correct = !correct;
    ComboBox12 -> Visible = !ComboBox12 -> Visible;
    Edit37 -> Visible = !Edit37 -> Visible;
}

void __fastcall TDeloForm::Edit35Change (TObject * Sender) {
    AnsiString serial = Edit35 -> Text;
    AnsiString key;
    key = serial.SubString (serial.Length (), 1);
    if ( (key < 'А' || key > 'Я')) {
        serial = serial.SubString (1, serial.Length () - 1);
        Edit35 -> Text = serial;
        ShowMessage (
            "Серия диплома должна содержать только кириллические буквы!");
    }
}
